//import statements

package net.etfbl.kki;

import java_cup.runtime.*;
import rs.etf.pp1.symboltable.Tab;
import rs.etf.pp1.symboltable.concepts.*;
import rs.etf.pp1.mj.runtime.Code;
import java.util.*;

//action & parser code

parser code {:

	//level A
	int nDeclGlobSimpleVars;
	int nDeclGlobSimpleConsts;
	int nSimpleMainStatements;
	int nStatementBlocks;
	
	//level B
	int nDefProgramFuncs;
	int nDeclGlobArrays;
	int nFuncCallsInMain;
	
	//level C
	int nDeclClasses;
	int nDefClassMeths;
	int nObjInsts;
	
	//flags
	int inProgramParams; //if greater that zero, currently parsed elements are members of program - global scope
	boolean inMain; //if currently parsing main
	boolean errorDetected;
	
	public static Struct String = new Struct(Struct.Array, Tab.charType);
	public static Struct Bool = new Struct(Struct.Bool);
	
	
	public Obj __strfprint, __strfread;
	
	public void dbg(Object o){
		System.out.println(o);
	}
	
	public void report_error(String message, Object info){
		StringBuilder builder = new StringBuilder(message);
		if(info instanceof Symbol){
			builder.append(" in line ").append(((Symbol)info).left);
		}
		System.err.println(builder.toString());
		errorDetected = true;
	}
	
	public void report_fatal_error(String message, Object info) throws java.lang.Exception{
		done_parsing();
		report_error(message, info);
		errorDetected = true;
	}
	
	public void report_semanthic_error(String message, Object info) throws java.lang.Exception {
		report_error(message, info);
	}

	public void syntax_error(Symbol cur_token){
		report_error("\nSyntax error", cur_token);
	}

	public void unrecovered_syntax_error(Symbol cur_token) throws java.lang.Exception{
		report_fatal_error("\nFatal error!", cur_token);
	}

	public void report_info(String message, Object info){
		StringBuilder builder = new StringBuilder(message);
		if(info instanceof Symbol){
			builder.append(" in line ").append(((Symbol)info).left);
		}
		System.out.println(builder.toString());
	}

:}

scan with {:
	Symbol symbol = this.getScanner().next_token();
	/*if(symbol != null && symbol.value != null){
		System.out.println(symbol.toString() + " " + symbol.value.toString());
	}*/
	if(symbol.sym == sym.INVALID){
		System.err.println("INVALID symbol");
		symbol = this.getScanner().next_token();
	}
	return symbol;
:}

init with {:
	Tab.init();
	
	Tab.currentScope.addToLocals(new Obj(Obj.Type, "string", Parser.String));
	Tab.currentScope.addToLocals(new Obj(Obj.Type, "bool", Parser.Bool));
	if(__strfprint != null) Tab.currentScope.addToLocals(__strfprint);
	if(__strfread != null) Tab.currentScope.addToLocals(__strfread);

:}

action code {:

		class LiteralHolder {
			public Object value;
			public Struct type;
			public LiteralHolder(Object value, Struct type){
				this.value = value; this.type = type;
			}
		
			public int getIntValue(){
				if(type.getKind() == Struct.Int){
					return ((Integer)value).intValue();
				} else if (type.getKind() == Struct.Char) {
					return (int)((Character)value).charValue();
				} else if (type.getKind() == Struct.Bool) {
					return ((Boolean)value) ? 1 : 0 ;
				} else if(type == Parser.String) {
					String str = (String)value;
					//Obj strObj = new Obj(Obj.Con, "", Parser.String);
					int len = str.length();
					Code.loadConst(len);
					Code.put(Code.newarray); Code.put(0);
					
					for(int i = 0; i < len; i++){
						Code.put(Code.dup);
						Code.loadConst(i);
						Code.loadConst((int)str.charAt(i));
						Code.put(Code.bastore);
					}
					
					return 0;
					
				} else {
						try{
							parser.report_fatal_error("Literal has unknown type.",null);
						}catch(Exception ex){
							ex.printStackTrace();
						}
					return -1;
				}
			}
		}
		
		static class AdrDest {
			public int address;
			public int dest;
			public static int BEGIN = 1; //If
			public static int END = 2; //Else
			public static int NEXT = 3; //next term
			public AdrDest(int address, int dest){
				this.address = address;
				this.dest = dest;
			}
		}


		Struct currentType; //return type of method being parsed or type of consts or variables while parsing declaration
		int isVoid; // -1 not void, 0 undefined, 1 void
		Obj currentClass = Tab.noObj; //refers to class currently being parsed
		Obj currentMeth;			//refers to method/function currently being parsed
		Obj currentMethBeingCalled; //points to method that is being called while parsing ActPars
		boolean returnExists;
		int currentActPar;			//number of actual parameter currently being parsed, for matching purpose
		Obj currentDesignator;		//while parsing designator resolving expression, this poinst to this.inExpression or this[inExpression] ...
		Obj currentThis = Tab.noObj;//if designator resolvs in method that is part of class this points to that class
		Obj thisForMethCall = Tab.noObj; //resolvs to this argument of methods, can be equal to currentThis but there are situations when reference to class is implicit, then currentThis will be Tab.noObj, but thisForMethCall will point to right thing
		int currentLevel = -1; //current scope level => -1 = univers
		int ifAdr; //address of if statement for backpatching
		boolean lastTermInCondition;
		
		static class CondInfo {
		
			Deque<Deque<AdrDest>> condTerms;
			Deque<Integer> condTermAddresses;
			int beginIfAddress;
			
			public CondInfo(){
				condTerms = new LinkedList<Deque<AdrDest>>();
				condTerms.addLast(new LinkedList<AdrDest>());
				condTermAddresses = new LinkedList<Integer>();				
			}
		
		}
		
		Stack<CondInfo> condInfoStack = new Stack<CondInfo>();
		Stack<Deque<Integer>> breakPointsStack = new Stack<Deque<Integer>>();
		
		void patchCondition(){
			patchCondition(false);
		}
		
		void patchCondition(boolean patchBreaks){
			condInfoStack.peek().condTermAddresses.addLast(Code.pc);
		
			Iterator<Integer> it = condInfoStack.peek().condTermAddresses.iterator();
			
			for(Deque<AdrDest> facts : condInfoStack.peek().condTerms){
				int nextAdr = it.next();
				
				for(AdrDest ad : facts){
					int patchAdr = ad.address;
					if(ad.dest == AdrDest.BEGIN){
						Code.put2(patchAdr, (condInfoStack.peek().beginIfAddress-patchAdr + 1));
					} else if (ad.dest == AdrDest.NEXT) {
						Code.put2(patchAdr, (nextAdr-patchAdr + 1));
					} else {
						parser.report_error("Ne mere to!", null);
					}
				}
			}
			
			if(patchBreaks && !breakPointsStack.empty()){
				Deque<Integer> breaks = breakPointsStack.pop();
				for(int adr : breaks){
					Code.fixup(adr);
				}
			}
			
			//we've used it
			condInfoStack.pop();
		}
		
		
		String[] kinds = {"constant", "variable", "type", "method", "field", "element", "program"};
		Stack<Obj> currentDesignatorStack = new Stack<Obj>();
		Stack<Obj> currentThisStack = new Stack<Obj>();
		Stack<Obj> thisForMethCallStack = new Stack<Obj>();
		Stack<Obj> currentMethBeingCalledStack = new Stack<Obj>();
		
		void popCurrentThis(){
			if(!currentThisStack.empty()) currentThis = currentThisStack.pop();
		}
		
		void pushCurrentThis(){
			currentThisStack.push(currentThis);
			currentThis = Tab.noObj;
		}
		
		void pushCurrentDesignator() {
			currentDesignatorStack.push(currentDesignator);
			currentDesignator = Tab.noObj;
		}
		
		void popCurrentDesignator() {
			if(!currentDesignatorStack.empty()) currentDesignator = currentDesignatorStack.pop();
		}
		
		void popThisForMethCallStack(){
			if(!currentDesignatorStack.empty()) thisForMethCall = thisForMethCallStack.pop();
			if(!currentMethBeingCalledStack.empty()) currentMethBeingCalled = currentMethBeingCalledStack.pop();
		}
		
		void pushThisForMethCallStack(){
			thisForMethCallStack.push(thisForMethCall);
			thisForMethCall = Tab.noObj;
			currentMethBeingCalledStack.push(currentMethBeingCalled);
			currentMethBeingCalled = Tab.noObj;
		}
		
		
		void initCurrentThis(Obj local, int ileft) throws Exception {
			if(local.getKind() == Obj.Meth){
				if(currentDesignator.getType().getKind() == Struct.Class){
					currentThis = currentDesignator;
				} else {
					parser.report_semanthic_error(ileft + " : Method called for non-class type.",null);
					currentThis = Tab.noObj;
				}
			}else{
				currentThis = Tab.noObj;
			}

		}
		
		
		void doIncOrDec(Obj d, int op, int dleft) throws Exception {
		
			int diff = (op == Code.add) ? 1 : -1 ;
			
			if(d.getType().getKind() == Struct.Int || d.getType().getKind() == Struct.Char){
				
				if(d.getLevel() == 0 || d.getKind() == Obj.Fld || d.getKind() == Obj.Elem){ //it is not local
					if(d.getKind() == Obj.Fld){
						Code.put(Code.dup);
					} else if(d.getKind() == Obj.Elem){
						Code.put(Code.dup2);
					}
					
					Code.load(d);
					Code.loadConst(1);
					Code.put(op);
					Code.store(d);
				//} else if (d.getKind() == Obj.Fld) {
					//parser.report_fatal_error(dleft+" : not yet implemented", null);
				} else {
					Code.put(Code.inc); Code.put(d.getAdr()); Code.put(diff);
				}
			} else { 
				parser.report_semanthic_error(dleft + " : Only int and char types can be de/increamented", null);
			}
		}
		
		int sizeOf(Struct st){
			if(st == null) return 0;
			
			if(st.getKind() == Struct.None) return 0;
			else if(st.getKind() == Struct.Array) return 4;
			else if(st.getKind() == Struct.Class) return inheritanceSizeOf(st);
			else return 4;
		}
		
		int inheritanceSizeOf(Struct derived){
			int s = 0;
			do {
				s += derived.getNumberOfFields();
				derived = derived.getElemType();		
			}while(derived != null);
			return s*4;
		}
		
		Obj findLocal(Obj container, String localName){
		
			if(("this".equals(container.getName())) ){// || (container == currentClass && container != Tab.noObj)){
				return findMemberOfCurrentClass(localName);
			} else {
				Collection<Obj> locals = container.getLocalSymbols();
				for(Obj l : locals){
					if(l.getName().equals(localName)){
						return l;
					}
				}
			}
			if(container.getType().getKind() == Struct.Class){
				return findInheritedMember(container.getType(), localName);
			}
			
			return Tab.noObj;
			
		}
		
		boolean assignableTo(Struct src, Struct dest){
			if(src.getKind() != Struct.Class){
				return src.assignableTo(dest);
			}
		
			do {
				if(src.assignableTo(dest)){
					return true;
				}
				src = src.getElemType();
			} while(src != null);
			
			return false;
		}

		Obj getLocalAt(Obj ob, int pos){
			Object[] objs = (ob.getLocalSymbols().toArray());
			if(objs.length <= pos) return Tab.noObj;
			else return (Obj)objs[pos];
		}
		
		Obj findMemberOfCurrentClass(String name){
			Obj res = Tab.currentScope.getOuter().findSymbol(name);
			if(res != null){
				return res;
			}
			if(currentClass.getType().getElemType() != null){
				return findInheritedMember(currentClass.getType().getElemType(), name);
			}
			return Tab.noObj;
			
		}
		
		Obj findInheritedMember(Struct derivedClass, String name) {
			Struct cc = derivedClass;
			do {
				Obj obj = cc.getMembersTable().searchKey(name);
				
				if(obj != null){
					return obj;
				}
			
				cc = cc.getElemType();
			} while(cc != null);
			
			return Tab.noObj;
		}
		
		
		void openScope(){
			currentLevel++;
			Tab.openScope();
		}
		
		void closeScope(){
			currentLevel--;
			Tab.closeScope();
		}
		
:}

//keyword terminals
terminal PROGRAM, PRINT, RETURN, VOID, CLASS, EXTENDS, NEW, IF, ELSE, WHILE, READ ;
terminal BREAK, DO, CONST ;

//operator terminals
terminal LOGICAL_OR, LOGICAL_AND, INCREAMENT, DECREAMENT, EQUAL, NOT_EQUAL, GREATER ;
terminal GREATER_OR_EQUAL, LESS, LESS_OR_EQUAL, PLUS, MINUS, ASSIGNMENT, TIMES, DEVIDE ;
terminal MOD, SEMI, COMMA, LPAREN, RPAREN, LBRACE, RBRACE, RBRACKET, LBRACKET, DOT ;

//literal terminals
terminal NUMBER_LITERAL, BOOL_LITERAL, CHAR_LITERAL, STRING_LITERAL ;

//other terminals
terminal INVALID ;
terminal String IDENT ;

//non-terminals:
non terminal Program, ProgParamDeclList, MethodDeclList, ProgParamDeclPart, ConstDecl, VarDecl, ClassDecl, ConstDeclNames, ConstDeclName ;
non terminal VarDeclList, VarDeclNames, VarDeclName, extendsStm, ClassMemberDeclList, ClassMemberDecl, MethodDecl, MethodDeclRest ;
non terminal FormPar ;
non terminal Statement, StatementList, OtherStatement, OpenIf, ClosedIf ;

non terminal Integer Else, LoopHeader, Do ;
non terminal Integer Relop, Addop, Mulop, CondFact, CondTerm ;
non terminal Struct Condition;
non terminal Obj ProgName, Designator, DesignatorRest, DesignatorRestPart ;
non terminal Struct Type, Expr, ExprRest, Term, Factor, MethodCall ;
non terminal Integer FormPars, FormParList, ActPars;

non terminal LiteralHolder Literal;
non terminal Integer ParensAndActPars;
non terminal ParensAndCondition;
//grammar

Program ::= PROGRAM ProgName:p {: parser.inProgramParams++; :} ProgParamDeclList LBRACE MethodDeclList RBRACE 
{: 
	Code.dataSize = Tab.currentScope.getnVars();
	parser.inProgramParams--;
	Tab.chainLocalSymbols(p);
	closeScope();
:};

ProgName ::= IDENT:pn {:
	parser.report_info("Program: " + pn, null);
	RESULT = Tab.insert(Obj.Prog, pn, Tab.noType);
	RESULT.setLevel(currentLevel);
	openScope(); 
:}
;

ProgParamDeclList ::= ProgParamDeclList ProgParamDeclPart | /* epsilon */ ;
ProgParamDeclPart ::= ConstDecl | VarDecl | ClassDecl ;

ConstDecl ::= CONST Type ConstDeclNames SEMI | CONST error SEMI ;
ConstDeclNames ::= ConstDeclNames COMMA ConstDeclName | ConstDeclName ;
ConstDeclName ::= IDENT:name ASSIGNMENT Literal:l
				{: 
					if(parser.inProgramParams>0) parser.nDeclGlobSimpleConsts++; 
					Obj con = Tab.insert(Obj.Con, name, currentType);
					con.setLevel(currentLevel);
					con.setAdr(l.getIntValue());
					
					parser.report_info(nameleft+" : Declared constant "+name,null);
				:}
				;


Literal ::= NUMBER_LITERAL:n {: RESULT = new LiteralHolder(n, Tab.intType); :} | BOOL_LITERAL:n  {: RESULT = new LiteralHolder(n, Parser.Bool); :} | CHAR_LITERAL:n  {: RESULT = new LiteralHolder(n, Tab.charType); :} | STRING_LITERAL:n  {: RESULT = new LiteralHolder(n, Parser.String); :} ;

VarDeclList ::= VarDecl VarDeclList | /* epsilon */ ;
VarDecl ::= Type VarDeclNames SEMI  | Type error SEMI | Type error LBRACE ;
VarDeclNames ::= VarDeclNames COMMA VarDeclName | VarDeclName ;
VarDeclName ::= IDENT:name 
				{: 
					if(parser.inProgramParams>0) parser.nDeclGlobSimpleVars++;
					Obj var;

					if(currentLevel == 1 && currentClass != Tab.noObj){ //we're in class
						var = Tab.insert(Obj.Fld, name, currentType);
						var.setAdr(var.getAdr() + currentClass.getAdr());
					} else {
						var = Tab.insert(Obj.Var, name, currentType);
						
					}
					var.setLevel(currentLevel);
					parser.report_info(nameleft+" : Declared "+ kinds[var.getKind()] +" "+name, null);
				:} 
				| IDENT:name LBRACKET RBRACKET
				{:
					if(parser.inProgramParams>0) parser.nDeclGlobSimpleVars++;
					Obj var;
					
					Struct t = new Struct(Struct.Array, currentType);
					
					if(currentLevel == currentClass.getLevel() && currentClass != Tab.noObj){ //we're in class
						var = Tab.insert(Obj.Fld, name, t);
						var.setAdr(var.getAdr() + currentClass.getAdr());
						
					} else {
						var = Tab.insert(Obj.Var, name, t);
						
					}
					var.setLevel(currentLevel);
					parser.report_info(nameleft+" : Declared "+ kinds[var.getKind()] +" "+name, null);
				:}
				 ;

ClassDecl ::= CLASS IDENT:i 
{:
	parser.nDeclClasses++;
	currentClass = Tab.insert(Obj.Type, i, new Struct(Struct.Class));
	RESULT = currentClass;
:}
 extendsStm LBRACE {: parser.inProgramParams--; openScope(); currentClass.setLevel(currentLevel); /* used for offset - inherited members size */ currentClass.setAdr(sizeOf(currentClass.getType().getElemType())); :} ClassMemberDeclList RBRACE {: parser.inProgramParams++; Tab.chainLocalSymbols(currentClass); Tab.chainLocalSymbols(currentClass.getType()); currentClass = Tab.noObj; closeScope(); :} ;

extendsStm ::= EXTENDS IDENT:i 
			{:
				Obj superClass = Tab.find(i);
				
				parser.dbg("extends " + kinds[superClass.getKind()] + " " + superClass.getName());
				
				currentClass.getType().setElementType(superClass.getType());
				/* TODO offsets and things */
				
			:} 
			| EXTENDS error LBRACE 
			| /* epsilon */ 
			;
ClassMemberDeclList ::= ClassMemberDecl ClassMemberDeclList | error ClassMemberDeclList RBRACE | /* epsilon */ ;
ClassMemberDecl ::= VarDecl | MethodDecl ;

MethodDeclList ::= MethodDecl MethodDeclList | /* epsilon */;
MethodDecl ::= Type MethodDeclRest | VOID {: isVoid = 1; currentType = Tab.noType; :} MethodDeclRest ;
MethodDeclRest ::= IDENT:methName 
				{:
				 if(parser.inProgramParams>0) { parser.nDefProgramFuncs++; if("main".equals(methName)) { parser.inMain = true; Code.mainPc = Code.pc; }}
				 else parser.nDefClassMeths++;
				 parser.inProgramParams--; 
				 
				 currentMeth = Tab.insert(Obj.Meth, methName, currentType);
				 currentMeth.setAdr(Code.pc);
				 parser.report_info("Declaring method " + currentMeth.getName() + " @ " + currentMeth.getAdr(), null);
				  
				 returnExists = false;
				 openScope();
				 isVoid = 0;
				 
				:}
				LPAREN {: if(currentClass != Tab.noObj){ Obj var = Tab.insert(Obj.Var, "this", currentClass.getType());	var.setLevel(currentLevel); } :}
				FormPars:level RPAREN VarDeclList LBRACE  
				{: 
					int nvars = Tab.currentScope.getnVars();
					if(currentClass != Tab.noObj) { level++; }
					currentMeth.setLevel(level); //number of parameters
					Code.put(Code.enter); Code.put(currentMeth.getLevel()); Code.put(nvars);
				:}
				StatementList RBRACE 
				{:
					parser.inProgramParams++;
					parser.inMain = false;
					
					Tab.chainLocalSymbols(currentMeth);
					closeScope();
					
					if(!returnExists && currentMeth.getType() == Tab.noType) {
							Code.put(Code.exit); Code.put(Code.return_);
					}
					
					//stop execution if there return statement is skipped
					Code.put(Code.trap); Code.put(1);
					
				:}
				;


FormPars ::= FormParList:n {: RESULT = n; :} | /* epsilon */ {: RESULT = new Integer(0); :} ;
FormParList ::= FormPar COMMA FormParList:n {: RESULT = n + 1; :} | FormPar {: RESULT = new Integer(1); :} | error COMMA |  error RPAREN ;
FormPar ::= Type:t IDENT:i
		{:
			Obj var = Tab.insert(Obj.Var, i, t);
			var.setLevel(currentLevel);
		:}
		;


Type ::= IDENT:typeName
		{:
			Obj typeNode = Tab.find(typeName);
		
			if(typeNode == Tab.noObj)
			{
				parser.report_error("No type " + typeName + " in symbol table.", null);
				RESULT = Tab.noType;
			}
			else{
				if(typeNode.getKind() == Obj.Type){
					RESULT = typeNode.getType();
				}
				else{
					parser.report_error("Error in line " + typeNameleft + " : Name " + typeName + " is not type name.", null);
					RESULT = Tab.noType;
				}
			}
			currentType = RESULT;
		:};

StatementList ::= StatementList Statement | /* epsilon */ ;

Else ::= ELSE {: Code.putJump(0); RESULT = Code.pc -2;  patchCondition(); :} ;
ParensAndCondition ::= LPAREN {: condInfoStack.push(new CondInfo()); :} Condition RPAREN ;

Statement ::= OpenIf | ClosedIf ;

OpenIf ::= IF ParensAndCondition Statement {: patchCondition(); :} 
		| IF error RPAREN Statement
		| IF ParensAndCondition ClosedIf Else:elseAdr OpenIf {: Code.fixup(elseAdr); :} | IF error RPAREN ClosedIf ELSE OpenIf
		| LoopHeader:topAdr OpenIf {: Code.putJump(topAdr); patchCondition(true); :}
		;

ClosedIf ::= {: if(parser.inMain){ parser.nSimpleMainStatements++;}:} OtherStatement 
		 | IF ParensAndCondition ClosedIf Else:elseAdr ClosedIf {: Code.fixup(elseAdr); :}| IF error RPAREN ClosedIf ELSE ClosedIf
		 | LoopHeader:topAdr ClosedIf {: Code.putJump(topAdr); patchCondition(true); :}
		 ;

OtherStatement ::= Designator:d ASSIGNMENT Expr:e SEMI 
				{:
					if(assignableTo(e, d.getType())){
						Code.store(d);
					} else {
						parser.report_semanthic_error(dleft + " : Types are not assignable.",null);
					}
					
				:}
				| Designator ASSIGNMENT error SEMI | error ASSIGNMENT Expr SEMI
				| Designator:d INCREAMENT SEMI 
				{: 
					doIncOrDec(d, Code.add, dleft);
				:}
				| Designator:d DECREAMENT SEMI 
				{:
					doIncOrDec(d, Code.sub, dleft);
				:}
				| MethodCall {: if(parser.inMain){parser.nSimpleMainStatements--; parser.nFuncCallsInMain++; } :} SEMI
				| READ LPAREN Designator:d RPAREN SEMI
				{:
					if(d.getType().getKind() == Struct.Int){
						Code.put(Code.read);
						Code.store(d);
					} else if (d.getType().getKind() == Struct.Char) {
						Code.put(Code.bread);
						Code.store(d);
					} else if(d.getType() == Parser.String){
						Code.load(d);
						Code.put(Code.dup); Code.put(Code.arraylength);
						//stack: adr len
						int destAdr = parser.__strfread.getAdr() - Code.pc;
						Code.put(Code.call); Code.put2(destAdr);
					} else {
						parser.report_semanthic_error(dleft + " : Only int and char types can be read.", null);
					}
				:}
				| PRINT LPAREN Expr:e RPAREN SEMI
				{:
					if(e.getKind() == Struct.Int || e.getKind() == Struct.Bool){
						Code.loadConst(1);
						Code.put(Code.print);
					} else if (e.getKind() == Struct.Char) {
						Code.loadConst(1);
						Code.put(Code.bprint);
					} else if (e == Parser.String) {
						Code.put(Code.dup); Code.put(Code.arraylength);
						//stack: adr len
						int destAdr = parser.__strfprint.getAdr() - Code.pc;
						Code.put(Code.call); Code.put2(destAdr);
						
					} else {
						parser.report_semanthic_error(eleft + " : Not implemented.", null);
					}
				:}
				| PRINT LPAREN Expr:e COMMA NUMBER_LITERAL:n RPAREN SEMI
				{:
					if(e.getKind() == Struct.Int || e.getKind() == Struct.Bool){
						Code.loadConst((Integer)n);
						Code.put(Code.print);
					} else if (e.getKind() == Struct.Char) {
						Code.loadConst((Integer)n);
						Code.put(Code.bprint);
					} else if (e == Parser.String) {
						Code.loadConst((Integer)n);
						//stack: adr n
						int destAdr = parser.__strfprint.getAdr() - Code.pc;
						Code.put(Code.call); Code.put2(destAdr);
						
					} else {
						parser.report_semanthic_error(eleft + " : Not implemented.", null);
					}
				:}
				| BREAK:b {: Code.putJump(0); if(breakPointsStack.empty()) { parser.report_error(bleft + " : Nowhere to break!", null); } else { breakPointsStack.peek().addLast(Code.pc - 2); } :} SEMI
				| RETURN SEMI {: Code.put(Code.exit); Code.put(Code.return_); returnExists = true; :}
				| RETURN Expr:e SEMI {: if(assignableTo(e, currentMeth.getType())){ Code.put(Code.exit); Code.put(Code.return_); returnExists = true; } else { parser.report_semanthic_error(eleft + " : Type not assignable to return type.", null); } :}
				| LBRACE StatementList RBRACE {: if(parser.inMain) { parser.nStatementBlocks++; parser.nSimpleMainStatements--; }:}
				| Do:topAdr Statement WHILE ParensAndCondition {: Code.putJump(topAdr); patchCondition(true); :} SEMI | Do Statement WHILE error RPAREN
				| SEMI
				;

LoopHeader ::= WHILE {: RESULT = Code.pc; :} ParensAndCondition {: breakPointsStack.push(new LinkedList<Integer>()); :} | WHILE error RPAREN
			;
Do ::= DO {: breakPointsStack.push(new LinkedList<Integer>()); RESULT = Code.pc; :};

			
ActPars ::= ActPars:n COMMA Expr:pt {: RESULT = n + 1; if(!assignableTo(getLocalAt(currentMethBeingCalled, RESULT-1).getType(), pt)){parser.report_semanthic_error(ptleft +" : Parameter " + RESULT + " does not match required type" + currentMethBeingCalled.getName() + " " + currentThis.getName() + " " + thisForMethCall.getName(), null);} :} 
		| Expr:pt {: RESULT = (thisForMethCall != Tab.noObj) ? new Integer(2) : new Integer(1); if(!assignableTo(getLocalAt(currentMethBeingCalled, RESULT-1).getType(), pt)){parser.report_semanthic_error(ptleft +" : Parameter " + RESULT + " does not match required type" + currentMethBeingCalled.getName() + " " + currentThis.getName() + " " + thisForMethCall.getName(), null);} :} 
		| ActPars error COMMA 
		| ActPars error RPAREN
		;
		
Condition ::= CondTerm {: condInfoStack.peek().condTerms.addLast(new LinkedList<AdrDest>()); condInfoStack.peek().condTermAddresses.addLast(Code.pc); :} LOGICAL_OR Condition
			| 
			CondTerm:op
			{:
				//The last term in cond
				
				//Revert what last Fact did, because he didn't know that he's last
				Code.pc -= 3;
				condInfoStack.peek().condTerms.getLast().removeLast();
				
				//now fix it
				Code.putFalseJump(op, 0);
				condInfoStack.peek().condTerms.getLast().addLast(new AdrDest(Code.pc - 2, AdrDest.NEXT));
				
				//This is obsolite now
				//Code.putJump(0);
				//condTerms.getLast().addLast(new AdrDest(Code.pc - 2, AdrDest.NEXT));
				
				condInfoStack.peek().beginIfAddress = Code.pc;
			:}
			;
			
CondTerm ::= CondFact:op
		{:
			Code.putFalseJump(op, 0);
			//non of the above :)
			condInfoStack.peek().condTerms.getLast().addLast(new AdrDest(Code.pc - 2, AdrDest.NEXT));
		:} 
		LOGICAL_AND CondTerm:tt {: RESULT = tt; :}
		| CondFact:op 
		{:
			//The last in Term
			//just last Fact in Term
			Code.putFalseJump(Code.inverse[op], 0);
			condInfoStack.peek().condTerms.getLast().addLast(new AdrDest(Code.pc - 2, AdrDest.BEGIN));
			RESULT = op;
		:} 
		;

CondFact ::= Expr:ft Relop:op Expr:et
		{:
			RESULT = op;
		:}
		 | Expr:et {: if(et.getKind() != Struct.Bool) parser.report_semanthic_error(etleft + " : Bool type expected!",null); RESULT = Code.eq; Code.loadConst(1); :} ;


Expr ::= MINUS ExprRest:r {: RESULT = r; :} | ExprRest:r {: RESULT = r; :} ;
ExprRest ::= ExprRest:r Addop:op Term:t
			{:
				if(r.compatibleWith(t)){
					RESULT = r;
				} else {
					RESULT = Tab.noType;
				}
				
				Code.put(op);
				
			:} 
			| Term:t {: RESULT = t; :}
			;
			
			
Term ::= Term:t Mulop:m Factor:f 
		{:
			if (t.getKind() == Struct.Int && f.getKind() == Struct.Int) {
				RESULT = t;
			} else {
				RESULT = Tab.noType;
			}
			
			Code.put(m);
		:}
		 | Factor:f {: RESULT = f; :}
		 ;
		 
Factor ::= Literal:l {: RESULT = l.type; int v = l.getIntValue(); if(l.type != Parser.String) Code.loadConst(v); :}
		| LPAREN Expr:t RPAREN {: RESULT  = t; :}
		| NEW Type:t {: parser.nObjInsts++; RESULT = t; Code.put(Code.new_); Code.put2(sizeOf(t)); :}
		| NEW Type:t LBRACKET Expr:e RBRACKET 
		{:
			if(e.getKind() == Struct.Int) {
				RESULT = new Struct(Struct.Array, t);
				int ischar = t.getKind() == Struct.Char ? 0 : 1 ; 
				Code.put(Code.newarray); Code.put(ischar);
			} else {
				RESULT = Tab.noType; parser.report_info(eleft+" : Array index must be of type int.",null);
			}
		:}
		| Designator:d {: RESULT = d.getType(); Code.load(d); :}
		| MethodCall:mt {: RESULT = mt; :}
		;
		
		
		
MethodCall ::= Designator:d
		{:
			pushThisForMethCallStack();
			if(d.getKind() == Obj.Meth){
				if(currentThis != Tab.noObj){
					thisForMethCall = currentThis;
				} else if (currentClass != Tab.noObj && findMemberOfCurrentClass(d.getName()) == d){
					thisForMethCall = currentClass;
					Code.load(Tab.find("this"));
				}
				currentMethBeingCalled = d; currentActPar = 0;
			} else {
				parser.report_info(dleft+" : " + d.getName() + " is not method.", null);
				//currentMethBeingCalled = null;
			}
		:} ParensAndActPars:n 
		{:
			if(d.getKind() != Obj.Meth || d.getLevel() != n) {
				parser.report_error(dleft+" : number of parameters does not match. " + d.getLevel() + " != " + n + " | " + thisForMethCall.getName() ,null);
				RESULT = Tab.noType;
			} else {
				RESULT = d.getType();
			}
			
			parser.report_info("Calling method " + currentMethBeingCalled.getName() + " @ " + currentMethBeingCalled.getAdr(),null);
			int destAddr = currentMethBeingCalled.getAdr() - Code.pc;
			Code.put(Code.call);
			Code.put2(destAddr);
			popThisForMethCallStack();
			popCurrentThis();
		:}
		;
		
ParensAndActPars ::= LPAREN RPAREN {: RESULT = (thisForMethCall != Tab.noObj) ? new Integer(1) : new Integer(0); :} | LPAREN ActPars:n RPAREN {: RESULT = n; :} ;
		
Designator ::= IDENT:i
				{:
					pushCurrentDesignator();
					pushCurrentThis();
					Obj ob;
					ob = Tab.find(i);
						
					if(ob != Tab.noObj){
						parser.report_info(ileft+" : Used " + kinds[ob.getKind()] + " " + i + " level: " + ob.getLevel(), null);
					}

					if(ob.getKind() == Obj.Fld){
				 		currentDesignator = Tab.find("this");
						Code.load(currentDesignator);
					}

					RESULT = ob;
					popCurrentThis();
					popCurrentDesignator();
				:}
			 | IDENT:i
			 {: 
			 	pushCurrentDesignator();
			 	pushCurrentThis();
			 	Obj ob = Tab.find(i);
			 	
			 	if(ob.getKind() == Obj.Fld){
			 		currentDesignator = Tab.find("this");
					Code.load(currentDesignator);
				}
			 	
			 	initCurrentThis(ob, ileft);
			 	currentDesignator = ob;
			 :} 
			 DesignatorRest:r
			 {:
			 	RESULT = r;
			 	if(currentDesignator.getKind() != Obj.Meth) popCurrentThis(); //otherwise leave it for MethodCall to use it and then pop it
			 	popCurrentDesignator();
			 :}
			 ;
			 
DesignatorRest ::= DesignatorRest DesignatorRestPart:r {: RESULT = r; :} | DesignatorRestPart:r {: RESULT = r; :} ;
DesignatorRestPart ::= LBRACKET {: Code.load(currentDesignator);  :} Expr:e RBRACKET
					 {:
					 	//indeksiranje currentDesignator-a
					 	if(e.getKind() != Struct.Int) { RESULT = Tab.noObj; parser.report_info(eleft+" : Array index must be of type int.",null); }
					 	else if (currentDesignator.getType().getKind()==Struct.Array){
					 		RESULT=new Obj(Obj.Elem, "", currentDesignator.getType().getElemType());
					 	} else {
					 		parser.report_info(eleft+" : Only arrays can be indexed", null);
					 		RESULT = Tab.noObj;
					 	}
					 	
					 	currentDesignator = RESULT;
					 :}
					 | LBRACKET error RBRACKET
					 | DOT IDENT:i
					 {:
					 	//pristup polju ili poziv metode currentDesignator-a
					 	parser.report_info(ileft + " : currentDesignator " + currentDesignator.getType().getKind() + " " + currentDesignator.getName(), null);
					 	Obj local = findLocal(currentDesignator, i);
					 	parser.report_info(ileft+" : Accessing member " + i + " of " + kinds[currentDesignator.getKind()] + " " + currentDesignator.getName() + " found " + kinds[local.getKind()] + " " + local.getName() + " level=" + local.getLevel(), null);
					 	
					 	initCurrentThis(local, ileft);
					 	RESULT = local;
					 	
					 	Code.load(currentDesignator);
					 	
					 	currentDesignator = RESULT;
					 :}
					 ;

Relop ::= EQUAL {: RESULT = Code.eq; :} | NOT_EQUAL {: RESULT = Code.ne; :} | GREATER {: RESULT = Code.gt; :} | GREATER_OR_EQUAL {: RESULT = Code.ge; :} | LESS {: RESULT = Code.lt; :} | LESS_OR_EQUAL {: RESULT = Code.le; :};
Addop ::= PLUS {: RESULT = Code.add; :} | MINUS {: RESULT = Code.sub; :} ;
Mulop ::= TIMES {: RESULT = Code.mul; :} | DEVIDE {: RESULT = Code.div; :} | MOD {: RESULT = Code.rem; :} ;










