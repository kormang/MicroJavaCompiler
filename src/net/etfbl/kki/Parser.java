
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Mon Jun 15 22:37:32 CEST 2015
//----------------------------------------------------

package net.etfbl.kki;

import java_cup.runtime.*;
import rs.etf.pp1.symboltable.Tab;
import rs.etf.pp1.symboltable.concepts.*;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Mon Jun 15 22:37:32 CEST 2015
  */
public class Parser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public Parser() {super();}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\156\000\002\055\002\000\002\002\011\000\002\002" +
    "\004\000\002\053\003\000\002\003\004\000\002\003\002" +
    "\000\002\005\003\000\002\005\003\000\002\005\003\000" +
    "\002\006\006\000\002\011\005\000\002\011\003\000\002" +
    "\012\005\000\002\013\003\000\002\013\003\000\002\013" +
    "\003\000\002\013\003\000\002\014\004\000\002\014\002" +
    "\000\002\007\005\000\002\015\005\000\002\015\003\000" +
    "\002\016\003\000\002\016\005\000\002\056\002\000\002" +
    "\057\002\000\002\010\012\000\002\017\004\000\002\017" +
    "\002\000\002\020\004\000\002\020\002\000\002\021\003" +
    "\000\002\021\003\000\002\004\004\000\002\004\002\000" +
    "\002\022\004\000\002\022\004\000\002\060\002\000\002" +
    "\023\013\000\002\024\003\000\002\024\002\000\002\025" +
    "\005\000\002\025\003\000\002\026\004\000\002\054\003" +
    "\000\002\033\004\000\002\033\002\000\002\032\003\000" +
    "\002\032\003\000\002\035\007\000\002\035\011\000\002" +
    "\035\004\000\002\061\002\000\002\036\004\000\002\036" +
    "\010\000\002\036\004\000\002\034\006\000\002\034\005" +
    "\000\002\034\005\000\002\062\002\000\002\034\007\000" +
    "\002\063\002\000\002\034\010\000\002\034\007\000\002" +
    "\034\007\000\002\034\011\000\002\034\004\000\002\034" +
    "\004\000\002\034\005\000\002\034\005\000\002\034\011" +
    "\000\002\034\003\000\002\052\006\000\002\037\005\000" +
    "\002\037\003\000\002\031\005\000\002\031\003\000\002" +
    "\040\005\000\002\040\003\000\002\041\005\000\002\041" +
    "\003\000\002\030\004\000\002\030\003\000\002\043\005" +
    "\000\002\043\003\000\002\045\005\000\002\045\003\000" +
    "\002\047\003\000\002\047\005\000\002\047\004\000\002" +
    "\047\007\000\002\047\003\000\002\047\006\000\002\027" +
    "\003\000\002\027\004\000\002\050\004\000\002\050\003" +
    "\000\002\051\005\000\002\051\004\000\002\042\003\000" +
    "\002\042\003\000\002\042\003\000\002\042\003\000\002" +
    "\042\003\000\002\042\003\000\002\044\003\000\002\044" +
    "\003\000\002\046\003\000\002\046\003\000\002\046\003" +
    "" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\317\000\004\004\005\001\002\000\004\002\321\001" +
    "\002\000\004\060\006\001\002\000\012\010\ufffe\021\ufffe" +
    "\046\ufffe\060\ufffe\001\002\000\012\010\001\021\001\046" +
    "\001\060\001\001\002\000\012\010\ufffc\021\ufffc\046\ufffc" +
    "\060\ufffc\001\002\000\012\010\020\021\022\046\013\060" +
    "\014\001\002\000\004\060\311\001\002\000\010\007\053" +
    "\047\uffdf\060\014\001\002\000\050\022\uffd5\023\uffd5\026" +
    "\uffd5\027\uffd5\030\uffd5\031\uffd5\032\uffd5\033\uffd5\034\uffd5" +
    "\035\uffd5\037\uffd5\040\uffd5\041\uffd5\042\uffd5\043\uffd5\045" +
    "\uffd5\050\uffd5\051\uffd5\060\uffd5\001\002\000\012\010\ufffa" +
    "\021\ufffa\046\ufffa\060\ufffa\001\002\000\012\010\ufff9\021" +
    "\ufff9\046\ufff9\060\ufff9\001\002\000\012\010\ufffb\021\ufffb" +
    "\046\ufffb\060\ufffb\001\002\000\004\060\040\001\002\000" +
    "\012\010\ufffd\021\ufffd\046\ufffd\060\ufffd\001\002\000\004" +
    "\060\014\001\002\000\004\060\024\001\002\000\004\036" +
    "\032\001\002\000\006\042\ufff6\043\ufff6\001\002\000\006" +
    "\042\030\043\027\001\002\000\004\060\024\001\002\000" +
    "\012\010\ufff8\021\ufff8\046\ufff8\060\ufff8\001\002\000\006" +
    "\042\ufff7\043\ufff7\001\002\000\012\053\034\054\036\055" +
    "\035\056\037\001\002\000\006\042\ufff5\043\ufff5\001\002" +
    "\000\044\022\ufff4\023\ufff4\026\ufff4\027\ufff4\030\ufff4\031" +
    "\ufff4\032\ufff4\033\ufff4\034\ufff4\035\ufff4\037\ufff4\040\ufff4" +
    "\041\ufff4\042\ufff4\043\ufff4\045\ufff4\050\ufff4\001\002\000" +
    "\044\022\ufff2\023\ufff2\026\ufff2\027\ufff2\030\ufff2\031\ufff2" +
    "\032\ufff2\033\ufff2\034\ufff2\035\ufff2\037\ufff2\040\ufff2\041" +
    "\ufff2\042\ufff2\043\ufff2\045\ufff2\050\ufff2\001\002\000\044" +
    "\022\ufff3\023\ufff3\026\ufff3\027\ufff3\030\ufff3\031\ufff3\032" +
    "\ufff3\033\ufff3\034\ufff3\035\ufff3\037\ufff3\040\ufff3\041\ufff3" +
    "\042\ufff3\043\ufff3\045\ufff3\050\ufff3\001\002\000\044\022" +
    "\ufff1\023\ufff1\026\ufff1\027\ufff1\030\ufff1\031\ufff1\032\ufff1" +
    "\033\ufff1\034\ufff1\035\ufff1\037\ufff1\040\ufff1\041\ufff1\042" +
    "\ufff1\043\ufff1\045\ufff1\050\ufff1\001\002\000\006\011\uffe9" +
    "\046\uffe9\001\002\000\006\011\042\046\uffe5\001\002\000" +
    "\004\060\313\001\002\000\004\046\044\001\002\000\010" +
    "\007\uffe8\047\uffe8\060\uffe8\001\002\000\010\007\053\047" +
    "\uffe3\060\014\001\002\000\004\060\303\001\002\000\010" +
    "\007\uffe2\047\uffe2\060\uffe2\001\002\000\010\007\053\047" +
    "\uffe3\060\014\001\002\000\010\007\uffe1\047\uffe1\060\uffe1" +
    "\001\002\000\004\047\277\001\002\000\004\060\055\001" +
    "\002\000\010\007\uffdd\047\uffdd\060\uffdd\001\002\000\004" +
    "\044\uffdc\001\002\000\004\044\057\001\002\000\006\045" +
    "\uffd9\060\014\001\002\000\004\045\uffda\001\002\000\004" +
    "\060\276\001\002\000\004\045\066\001\002\000\006\043" +
    "\064\045\uffd7\001\002\000\004\060\014\001\002\000\004" +
    "\045\uffd8\001\002\000\006\046\uffef\060\014\001\002\000" +
    "\004\046\072\001\002\000\006\046\uffef\060\014\001\002" +
    "\000\004\046\ufff0\001\002\000\032\005\uffd3\006\uffd3\013" +
    "\uffd3\015\uffd3\016\uffd3\017\uffd3\020\uffd3\042\uffd3\044\uffd3" +
    "\046\uffd3\047\uffd3\060\uffd3\001\002\000\032\005\uffcd\006" +
    "\uffcd\013\100\015\074\016\uffcd\017\uffcd\020\uffcd\042\uffcd" +
    "\044\103\046\uffcd\047\104\060\uffcd\001\002\000\004\044" +
    "\273\001\002\000\022\005\220\006\221\016\213\017\223" +
    "\020\222\042\216\046\214\060\106\001\002\000\032\005" +
    "\uffd1\006\uffd1\013\uffd1\015\uffd1\016\uffd1\017\uffd1\020\uffd1" +
    "\042\uffd1\044\uffd1\046\uffd1\047\uffd1\060\uffd1\001\002\000" +
    "\032\005\uffd2\006\uffd2\013\uffd2\015\uffd2\016\uffd2\017\uffd2" +
    "\020\uffd2\042\uffd2\044\uffd2\046\uffd2\047\uffd2\060\uffd2\001" +
    "\002\000\004\044\203\001\002\000\030\005\uffcd\006\uffcd" +
    "\013\100\015\074\016\uffcd\017\uffcd\020\uffcd\042\uffcd\044" +
    "\103\046\uffcd\060\uffcd\001\002\000\032\005\uffd4\006\uffd4" +
    "\013\uffd4\015\uffd4\016\uffd4\017\uffd4\020\uffd4\042\uffd4\044" +
    "\uffd4\046\uffd4\047\uffd4\060\uffd4\001\002\000\022\012\107" +
    "\035\105\044\121\053\034\054\036\055\035\056\037\060" +
    "\106\001\002\000\010\007\uffdb\047\uffdb\060\uffdb\001\002" +
    "\000\020\012\107\044\121\053\034\054\036\055\035\056" +
    "\037\060\106\001\002\000\060\022\uffa4\023\uffa4\024\uffa4" +
    "\025\uffa4\026\uffa4\027\uffa4\030\uffa4\031\uffa4\032\uffa4\033" +
    "\uffa4\034\uffa4\035\uffa4\036\uffa4\037\uffa4\040\uffa4\041\uffa4" +
    "\042\uffa4\043\uffa4\044\uffa4\045\uffa4\050\uffa4\051\173\052" +
    "\174\001\002\000\004\060\014\001\002\000\024\022\uffb1" +
    "\023\uffb1\026\uffb1\027\uffb1\030\uffb1\031\uffb1\032\uffb1\033" +
    "\uffb1\045\uffb1\001\002\000\046\022\uffa6\023\uffa6\026\uffa6" +
    "\027\uffa6\030\uffa6\031\uffa6\032\uffa6\033\uffa6\034\uffa6\035" +
    "\uffa6\037\uffa6\040\uffa6\041\uffa6\042\uffa6\043\uffa6\044\157" +
    "\045\uffa6\050\uffa6\001\002\000\044\022\uffaa\023\uffaa\026" +
    "\uffaa\027\uffaa\030\uffaa\031\uffaa\032\uffaa\033\uffaa\034\uffaa" +
    "\035\uffaa\037\uffaa\040\uffaa\041\uffaa\042\uffaa\043\uffaa\045" +
    "\uffaa\050\uffaa\001\002\000\006\022\147\045\150\001\002" +
    "\000\024\022\uffb3\023\uffb3\026\132\027\126\030\131\031" +
    "\130\032\133\033\127\045\uffb3\001\002\000\044\022\uffad" +
    "\023\uffad\026\uffad\027\uffad\030\uffad\031\uffad\032\uffad\033" +
    "\uffad\034\uffad\035\uffad\037\145\040\143\041\142\042\uffad" +
    "\043\uffad\045\uffad\050\uffad\001\002\000\044\022\uffab\023" +
    "\uffab\026\uffab\027\uffab\030\uffab\031\uffab\032\uffab\033\uffab" +
    "\034\uffab\035\uffab\037\uffab\040\uffab\041\uffab\042\uffab\043" +
    "\uffab\045\uffab\050\uffab\001\002\000\036\022\uffaf\023\uffaf" +
    "\026\uffaf\027\uffaf\030\uffaf\031\uffaf\032\uffaf\033\uffaf\034" +
    "\136\035\137\042\uffaf\043\uffaf\045\uffaf\050\uffaf\001\002" +
    "\000\010\022\uffb5\023\124\045\uffb5\001\002\000\022\012" +
    "\107\035\105\044\121\053\034\054\036\055\035\056\037" +
    "\060\106\001\002\000\004\045\123\001\002\000\044\022" +
    "\uffa9\023\uffa9\026\uffa9\027\uffa9\030\uffa9\031\uffa9\032\uffa9" +
    "\033\uffa9\034\uffa9\035\uffa9\037\uffa9\040\uffa9\041\uffa9\042" +
    "\uffa9\043\uffa9\045\uffa9\050\uffa9\001\002\000\022\012\107" +
    "\035\105\044\121\053\034\054\036\055\035\056\037\060" +
    "\106\001\002\000\024\022\uffb4\023\uffb4\026\132\027\126" +
    "\030\131\031\130\032\133\033\127\045\uffb4\001\002\000" +
    "\022\012\uff9d\035\uff9d\044\uff9d\053\uff9d\054\uff9d\055\uff9d" +
    "\056\uff9d\060\uff9d\001\002\000\022\012\uff99\035\uff99\044" +
    "\uff99\053\uff99\054\uff99\055\uff99\056\uff99\060\uff99\001\002" +
    "\000\022\012\uff9b\035\uff9b\044\uff9b\053\uff9b\054\uff9b\055" +
    "\uff9b\056\uff9b\060\uff9b\001\002\000\022\012\uff9c\035\uff9c" +
    "\044\uff9c\053\uff9c\054\uff9c\055\uff9c\056\uff9c\060\uff9c\001" +
    "\002\000\022\012\uff9e\035\uff9e\044\uff9e\053\uff9e\054\uff9e" +
    "\055\uff9e\056\uff9e\060\uff9e\001\002\000\022\012\uff9a\035" +
    "\uff9a\044\uff9a\053\uff9a\054\uff9a\055\uff9a\056\uff9a\060\uff9a" +
    "\001\002\000\022\012\107\035\105\044\121\053\034\054" +
    "\036\055\035\056\037\060\106\001\002\000\024\022\uffb2" +
    "\023\uffb2\026\uffb2\027\uffb2\030\uffb2\031\uffb2\032\uffb2\033" +
    "\uffb2\045\uffb2\001\002\000\020\012\uff98\044\uff98\053\uff98" +
    "\054\uff98\055\uff98\056\uff98\060\uff98\001\002\000\020\012" +
    "\uff97\044\uff97\053\uff97\054\uff97\055\uff97\056\uff97\060\uff97" +
    "\001\002\000\020\012\107\044\121\053\034\054\036\055" +
    "\035\056\037\060\106\001\002\000\044\022\uffae\023\uffae" +
    "\026\uffae\027\uffae\030\uffae\031\uffae\032\uffae\033\uffae\034" +
    "\uffae\035\uffae\037\145\040\143\041\142\042\uffae\043\uffae" +
    "\045\uffae\050\uffae\001\002\000\020\012\uff94\044\uff94\053" +
    "\uff94\054\uff94\055\uff94\056\uff94\060\uff94\001\002\000\020" +
    "\012\uff95\044\uff95\053\uff95\054\uff95\055\uff95\056\uff95\060" +
    "\uff95\001\002\000\020\012\107\044\121\053\034\054\036" +
    "\055\035\056\037\060\106\001\002\000\020\012\uff96\044" +
    "\uff96\053\uff96\054\uff96\055\uff96\056\uff96\060\uff96\001\002" +
    "\000\044\022\uffac\023\uffac\026\uffac\027\uffac\030\uffac\031" +
    "\uffac\032\uffac\033\uffac\034\uffac\035\uffac\037\uffac\040\uffac" +
    "\041\uffac\042\uffac\043\uffac\045\uffac\050\uffac\001\002\000" +
    "\022\012\107\035\105\044\121\053\034\054\036\055\035" +
    "\056\037\060\106\001\002\000\026\005\uffcd\006\uffcd\015" +
    "\074\016\uffcd\017\uffcd\020\uffcd\042\uffcd\044\103\046\uffcd" +
    "\060\uffcd\001\002\000\004\014\154\001\002\000\026\005" +
    "\uffcd\006\uffcd\015\074\016\uffcd\017\uffcd\020\uffcd\042\uffcd" +
    "\044\103\046\uffcd\060\uffcd\001\002\000\034\005\uffca\006" +
    "\uffca\013\uffca\014\uffca\015\uffca\016\uffca\017\uffca\020\uffca" +
    "\042\uffca\044\uffca\046\uffca\047\uffca\060\uffca\001\002\000" +
    "\026\005\uffcd\006\uffcd\015\074\016\uffcd\017\uffcd\020\uffcd" +
    "\042\uffcd\044\103\046\uffcd\060\uffcd\001\002\000\034\005" +
    "\uffcb\006\uffcb\013\uffcb\014\uffcb\015\uffcb\016\uffcb\017\uffcb" +
    "\020\uffcb\042\uffcb\044\uffcb\046\uffcb\047\uffcb\060\uffcb\001" +
    "\002\000\010\022\uffb6\023\124\045\uffb6\001\002\000\022" +
    "\012\107\035\105\044\121\053\034\054\036\055\035\056" +
    "\037\060\106\001\002\000\006\043\uffb7\045\uffb7\001\002" +
    "\000\006\043\162\045\163\001\002\000\022\012\107\035" +
    "\105\044\121\053\034\054\036\055\035\056\037\060\106" +
    "\001\002\000\044\022\uffa5\023\uffa5\026\uffa5\027\uffa5\030" +
    "\uffa5\031\uffa5\032\uffa5\033\uffa5\034\uffa5\035\uffa5\037\uffa5" +
    "\040\uffa5\041\uffa5\042\uffa5\043\uffa5\045\uffa5\050\uffa5\001" +
    "\002\000\006\043\uffb8\045\uffb8\001\002\000\046\022\uffa8" +
    "\023\uffa8\026\uffa8\027\uffa8\030\uffa8\031\uffa8\032\uffa8\033" +
    "\uffa8\034\uffa8\035\uffa8\037\uffa8\040\uffa8\041\uffa8\042\uffa8" +
    "\043\uffa8\045\uffa8\050\uffa8\051\166\001\002\000\022\012" +
    "\107\035\105\044\121\053\034\054\036\055\035\056\037" +
    "\060\106\001\002\000\004\050\170\001\002\000\044\022" +
    "\uffa7\023\uffa7\026\uffa7\027\uffa7\030\uffa7\031\uffa7\032\uffa7" +
    "\033\uffa7\034\uffa7\035\uffa7\037\uffa7\040\uffa7\041\uffa7\042" +
    "\uffa7\043\uffa7\045\uffa7\050\uffa7\001\002\000\060\022\uffa3" +
    "\023\uffa3\024\uffa3\025\uffa3\026\uffa3\027\uffa3\030\uffa3\031" +
    "\uffa3\032\uffa3\033\uffa3\034\uffa3\035\uffa3\036\uffa3\037\uffa3" +
    "\040\uffa3\041\uffa3\042\uffa3\043\uffa3\044\uffa3\045\uffa3\050" +
    "\uffa3\051\173\052\174\001\002\000\060\022\uffa1\023\uffa1" +
    "\024\uffa1\025\uffa1\026\uffa1\027\uffa1\030\uffa1\031\uffa1\032" +
    "\uffa1\033\uffa1\034\uffa1\035\uffa1\036\uffa1\037\uffa1\040\uffa1" +
    "\041\uffa1\042\uffa1\043\uffa1\044\uffa1\045\uffa1\050\uffa1\051" +
    "\uffa1\052\uffa1\001\002\000\022\012\107\035\105\044\121" +
    "\053\034\054\036\055\035\056\037\060\106\001\002\000" +
    "\004\060\175\001\002\000\060\022\uff9f\023\uff9f\024\uff9f" +
    "\025\uff9f\026\uff9f\027\uff9f\030\uff9f\031\uff9f\032\uff9f\033" +
    "\uff9f\034\uff9f\035\uff9f\036\uff9f\037\uff9f\040\uff9f\041\uff9f" +
    "\042\uff9f\043\uff9f\044\uff9f\045\uff9f\050\uff9f\051\uff9f\052" +
    "\uff9f\001\002\000\004\050\177\001\002\000\060\022\uffa0" +
    "\023\uffa0\024\uffa0\025\uffa0\026\uffa0\027\uffa0\030\uffa0\031" +
    "\uffa0\032\uffa0\033\uffa0\034\uffa0\035\uffa0\036\uffa0\037\uffa0" +
    "\040\uffa0\041\uffa0\042\uffa0\043\uffa0\044\uffa0\045\uffa0\050" +
    "\uffa0\051\uffa0\052\uffa0\001\002\000\060\022\uffa2\023\uffa2" +
    "\024\uffa2\025\uffa2\026\uffa2\027\uffa2\030\uffa2\031\uffa2\032" +
    "\uffa2\033\uffa2\034\uffa2\035\uffa2\036\uffa2\037\uffa2\040\uffa2" +
    "\041\uffa2\042\uffa2\043\uffa2\044\uffa2\045\uffa2\050\uffa2\051" +
    "\uffa2\052\uffa2\001\002\000\036\022\uffb0\023\uffb0\026\uffb0" +
    "\027\uffb0\030\uffb0\031\uffb0\032\uffb0\033\uffb0\034\136\035" +
    "\137\042\uffb0\043\uffb0\045\uffb0\050\uffb0\001\002\000\032" +
    "\005\uffce\006\uffce\013\uffce\015\uffce\016\uffce\017\uffce\020" +
    "\uffce\042\uffce\044\uffce\046\uffce\047\uffce\060\uffce\001\002" +
    "\000\022\012\107\035\105\044\121\053\034\054\036\055" +
    "\035\056\037\060\106\001\002\000\006\022\147\045\205" +
    "\001\002\000\030\005\uffcd\006\uffcd\013\100\015\074\016" +
    "\uffcd\017\uffcd\020\uffcd\042\uffcd\044\103\046\uffcd\060\uffcd" +
    "\001\002\000\034\005\uffd1\006\uffd1\013\uffd1\014\210\015" +
    "\uffd1\016\uffd1\017\uffd1\020\uffd1\042\uffd1\044\uffd1\046\uffd1" +
    "\047\uffd1\060\uffd1\001\002\000\032\005\uffd0\006\uffd0\013" +
    "\uffd0\015\uffd0\016\uffd0\017\uffd0\020\uffd0\042\uffd0\044\uffd0" +
    "\046\uffd0\047\uffd0\060\uffd0\001\002\000\006\013\100\015" +
    "\074\001\002\000\006\013\100\015\074\001\002\000\032" +
    "\005\uffcf\006\uffcf\013\uffcf\015\uffcf\016\uffcf\017\uffcf\020" +
    "\uffcf\042\uffcf\044\uffcf\046\uffcf\047\uffcf\060\uffcf\001\002" +
    "\000\004\044\267\001\002\000\032\005\uffd3\006\uffd3\013" +
    "\uffd3\015\uffd3\016\uffd3\017\uffd3\020\uffd3\042\uffd3\044\uffd3" +
    "\046\uffd3\047\uffd3\060\uffd3\001\002\000\012\024\251\025" +
    "\246\036\247\044\250\001\002\000\034\005\uffba\006\uffba" +
    "\013\uffba\014\uffba\015\uffba\016\uffba\017\uffba\020\uffba\042" +
    "\uffba\044\uffba\046\uffba\047\uffba\060\uffba\001\002\000\034" +
    "\005\uffcc\006\uffcc\013\uffcc\014\uffcc\015\uffcc\016\uffcc\017" +
    "\uffcc\020\uffcc\042\uffcc\044\uffcc\046\uffcc\047\uffcc\060\uffcc" +
    "\001\002\000\004\044\236\001\002\000\024\012\107\035" +
    "\105\042\234\044\121\053\034\054\036\055\035\056\037" +
    "\060\106\001\002\000\030\005\uffcd\006\uffcd\013\100\015" +
    "\074\016\uffcd\017\uffcd\020\uffcd\042\uffcd\044\103\046\uffcd" +
    "\060\uffcd\001\002\000\004\042\224\001\002\000\034\005" +
    "\uffbf\006\uffbf\013\uffbf\014\uffbf\015\uffbf\016\uffbf\017\uffbf" +
    "\020\uffbf\042\uffbf\044\uffbf\046\uffbf\047\uffbf\060\uffbf\001" +
    "\002\000\004\015\226\001\002\000\004\044\227\001\002" +
    "\000\022\012\107\035\105\044\121\053\034\054\036\055" +
    "\035\056\037\060\106\001\002\000\006\022\147\045\231" +
    "\001\002\000\004\042\232\001\002\000\034\005\uffbb\006" +
    "\uffbb\013\uffbb\014\uffbb\015\uffbb\016\uffbb\017\uffbb\020\uffbb" +
    "\042\uffbb\044\uffbb\046\uffbb\047\uffbb\060\uffbb\001\002\000" +
    "\004\042\235\001\002\000\034\005\uffbe\006\uffbe\013\uffbe" +
    "\014\uffbe\015\uffbe\016\uffbe\017\uffbe\020\uffbe\042\uffbe\044" +
    "\uffbe\046\uffbe\047\uffbe\060\uffbe\001\002\000\034\005\uffbd" +
    "\006\uffbd\013\uffbd\014\uffbd\015\uffbd\016\uffbd\017\uffbd\020" +
    "\uffbd\042\uffbd\044\uffbd\046\uffbd\047\uffbd\060\uffbd\001\002" +
    "\000\022\012\107\035\105\044\121\053\034\054\036\055" +
    "\035\056\037\060\106\001\002\000\006\043\240\045\241" +
    "\001\002\000\004\053\243\001\002\000\004\042\242\001" +
    "\002\000\034\005\uffc1\006\uffc1\013\uffc1\014\uffc1\015\uffc1" +
    "\016\uffc1\017\uffc1\020\uffc1\042\uffc1\044\uffc1\046\uffc1\047" +
    "\uffc1\060\uffc1\001\002\000\004\045\244\001\002\000\004" +
    "\042\245\001\002\000\034\005\uffc0\006\uffc0\013\uffc0\014" +
    "\uffc0\015\uffc0\016\uffc0\017\uffc0\020\uffc0\042\uffc0\044\uffc0" +
    "\046\uffc0\047\uffc0\060\uffc0\001\002\000\004\042\264\001" +
    "\002\000\022\012\107\035\105\044\121\053\034\054\036" +
    "\055\035\056\037\060\106\001\002\000\024\012\107\035" +
    "\105\044\121\045\254\053\034\054\036\055\035\056\037" +
    "\060\106\001\002\000\004\042\252\001\002\000\034\005" +
    "\uffc8\006\uffc8\013\uffc8\014\uffc8\015\uffc8\016\uffc8\017\uffc8" +
    "\020\uffc8\042\uffc8\044\uffc8\046\uffc8\047\uffc8\060\uffc8\001" +
    "\002\000\006\043\162\045\257\001\002\000\004\042\uffc6" +
    "\001\002\000\004\042\256\001\002\000\034\005\uffc5\006" +
    "\uffc5\013\uffc5\014\uffc5\015\uffc5\016\uffc5\017\uffc5\020\uffc5" +
    "\042\uffc5\044\uffc5\046\uffc5\047\uffc5\060\uffc5\001\002\000" +
    "\004\042\uffc4\001\002\000\004\042\261\001\002\000\034" +
    "\005\uffc3\006\uffc3\013\uffc3\014\uffc3\015\uffc3\016\uffc3\017" +
    "\uffc3\020\uffc3\042\uffc3\044\uffc3\046\uffc3\047\uffc3\060\uffc3" +
    "\001\002\000\004\042\263\001\002\000\034\005\uffc9\006" +
    "\uffc9\013\uffc9\014\uffc9\015\uffc9\016\uffc9\017\uffc9\020\uffc9" +
    "\042\uffc9\044\uffc9\046\uffc9\047\uffc9\060\uffc9\001\002\000" +
    "\034\005\uffc7\006\uffc7\013\uffc7\014\uffc7\015\uffc7\016\uffc7" +
    "\017\uffc7\020\uffc7\042\uffc7\044\uffc7\046\uffc7\047\uffc7\060" +
    "\uffc7\001\002\000\032\005\uffcd\006\uffcd\013\100\015\074" +
    "\016\uffcd\017\uffcd\020\uffcd\042\uffcd\044\103\046\uffcd\047" +
    "\266\060\uffcd\001\002\000\034\005\uffbc\006\uffbc\013\uffbc" +
    "\014\uffbc\015\uffbc\016\uffbc\017\uffbc\020\uffbc\042\uffbc\044" +
    "\uffbc\046\uffbc\047\uffbc\060\uffbc\001\002\000\004\060\106" +
    "\001\002\000\004\045\271\001\002\000\004\042\272\001" +
    "\002\000\034\005\uffc2\006\uffc2\013\uffc2\014\uffc2\015\uffc2" +
    "\016\uffc2\017\uffc2\020\uffc2\042\uffc2\044\uffc2\046\uffc2\047" +
    "\uffc2\060\uffc2\001\002\000\022\012\107\035\105\044\121" +
    "\053\034\054\036\055\035\056\037\060\106\001\002\000" +
    "\006\022\147\045\275\001\002\000\030\005\uffb9\006\uffb9" +
    "\013\uffb9\015\uffb9\016\uffb9\017\uffb9\020\uffb9\042\uffb9\044" +
    "\uffb9\046\uffb9\060\uffb9\001\002\000\006\043\uffd6\045\uffd6" +
    "\001\002\000\012\010\uffe7\021\uffe7\046\uffe7\060\uffe7\001" +
    "\002\000\004\047\uffe4\001\002\000\010\007\uffde\047\uffde" +
    "\060\uffde\001\002\000\006\042\310\043\307\001\002\000" +
    "\012\042\uffeb\043\uffeb\044\uffdc\051\305\001\002\000\006" +
    "\042\uffec\043\uffec\001\002\000\004\050\306\001\002\000" +
    "\006\042\uffea\043\uffea\001\002\000\004\060\311\001\002" +
    "\000\016\007\uffee\010\uffee\021\uffee\046\uffee\047\uffee\060" +
    "\uffee\001\002\000\010\042\uffeb\043\uffeb\051\305\001\002" +
    "\000\006\042\uffed\043\uffed\001\002\000\004\046\uffe6\001" +
    "\002\000\004\060\055\001\002\000\004\047\320\001\002" +
    "\000\010\007\053\047\uffdf\060\014\001\002\000\004\047" +
    "\uffe0\001\002\000\004\002\000\001\002\000\004\002\uffff" +
    "\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\317\000\004\002\003\001\001\000\002\001\001\000" +
    "\004\053\006\001\001\000\002\001\001\000\004\055\007" +
    "\001\001\000\004\003\010\001\001\000\014\005\020\006" +
    "\016\007\014\010\015\054\011\001\001\000\006\015\301" +
    "\016\303\001\001\000\010\004\314\022\315\054\313\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\054\022\001\001\000\006\011\025\012\024\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\012\030\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\013\032\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\056\040\001\001\000\004\017\042\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\057\044\001\001" +
    "\000\014\007\046\020\051\021\047\022\050\054\045\001" +
    "\001\000\010\015\301\016\303\023\300\001\001\000\002" +
    "\001\001\000\014\007\046\020\277\021\047\022\050\054" +
    "\045\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\023\053\001\001\000\002\001\001\000\004\060\055\001" +
    "\001\000\002\001\001\000\012\024\061\025\057\026\062" +
    "\054\060\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\010\025\064\026\062" +
    "\054\060\001\001\000\002\001\001\000\010\007\067\014" +
    "\066\054\011\001\001\000\002\001\001\000\010\007\067" +
    "\014\070\054\011\001\001\000\002\001\001\000\004\033" +
    "\072\001\001\000\014\032\101\035\076\036\075\052\100" +
    "\061\074\001\001\000\002\001\001\000\006\027\214\034" +
    "\216\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\012\035\201\036\152\052\100\061\074\001" +
    "\001\000\002\001\001\000\024\013\111\027\110\030\107" +
    "\031\112\040\117\041\113\043\116\045\114\047\115\001" +
    "\001\000\002\001\001\000\014\013\111\027\110\043\200" +
    "\045\114\047\115\001\001\000\006\050\170\051\171\001" +
    "\001\000\004\054\164\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\042" +
    "\133\001\001\000\004\046\143\001\001\000\002\001\001" +
    "\000\004\044\137\001\001\000\002\001\001\000\016\013" +
    "\111\027\110\030\121\043\116\045\114\047\115\001\001" +
    "\000\002\001\001\000\002\001\001\000\020\013\111\027" +
    "\110\030\107\041\124\043\116\045\114\047\115\001\001" +
    "\000\004\042\133\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\016\013\111\027\110\030\134\043" +
    "\116\045\114\047\115\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\012\013\111\027\110\045" +
    "\140\047\115\001\001\000\004\046\143\001\001\000\002" +
    "\001\001\000\002\001\001\000\010\013\111\027\110\047" +
    "\145\001\001\000\002\001\001\000\002\001\001\000\022" +
    "\013\111\027\110\030\107\040\155\041\113\043\116\045" +
    "\114\047\115\001\001\000\010\036\150\052\151\061\074" +
    "\001\001\000\002\001\001\000\010\036\152\052\151\061" +
    "\074\001\001\000\002\001\001\000\010\036\154\052\151" +
    "\061\074\001\001\000\002\001\001\000\002\001\001\000" +
    "\020\013\111\027\110\030\157\037\160\043\116\045\114" +
    "\047\115\001\001\000\002\001\001\000\002\001\001\000" +
    "\016\013\111\027\110\030\163\043\116\045\114\047\115" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\016\013\111\027\110\030\166\043\116\045\114" +
    "\047\115\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\051\177\001\001\000\002\001\001\000\016\013\111" +
    "\027\110\030\175\043\116\045\114\047\115\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\044\137\001\001\000" +
    "\002\001\001\000\024\013\111\027\110\030\107\031\203" +
    "\040\117\041\113\043\116\045\114\047\115\001\001\000" +
    "\002\001\001\000\014\032\206\035\076\036\205\052\100" +
    "\061\074\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\035\211\052\210\001\001\000\006\035\201\052\210" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\033" +
    "\264\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\016\013\111\027\110\030" +
    "\232\043\116\045\114\047\115\001\001\000\014\032\224" +
    "\035\076\036\075\052\100\061\074\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\024\013\111\027\110\030\107\031\227\040\117\041" +
    "\113\043\116\045\114\047\115\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\016\013\111\027\110" +
    "\030\236\043\116\045\114\047\115\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\016\013\111\027\110\030\261\043\116" +
    "\045\114\047\115\001\001\000\020\013\111\027\110\030" +
    "\157\037\252\043\116\045\114\047\115\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\062" +
    "\254\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\063\257\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\014" +
    "\032\101\035\076\036\075\052\100\061\074\001\001\000" +
    "\002\001\001\000\004\027\267\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\024\013\111\027" +
    "\110\030\107\031\273\040\117\041\113\043\116\045\114" +
    "\047\115\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\060\055\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\016\311\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\023\300\001\001" +
    "\000\002\001\001\000\010\004\316\022\315\054\313\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 2;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


  /** User initialization code. */
  public void user_init() throws java.lang.Exception
    {



    }

  /** Scan to get the next Symbol. */
  public java_cup.runtime.Symbol scan()
    throws java.lang.Exception
    {

	Symbol symbol = this.getScanner().next_token();
	/*if(symbol != null && symbol.value != null){
		System.out.println(symbol.toString() + " " + symbol.value.toString());
	}*/
	if(symbol.sym == sym.INVALID){
		System.err.println("INVALID symbol");
		symbol = this.getScanner().next_token();
	}
	return symbol;

    }



	//level A
	int nDeclGlobSimpleVars;
	int nDeclGlobSimpleConsts;
	int nSimpleMainStatements;
	int nStatementBlocks;
	
	//level B
	int nDefProgramFuncs;
	int nDeclGlobArrays;
	int nFuncCallsInMain;
	
	//level C
	int nDeclClasses;
	int nDefClassMeths;
	int nObjInsts;
	
	//flags
	int inProgramParams;
	boolean inMain;
	
	public void dbg(Object o){
		System.out.println(o);
	}
	
	public void report_error(String message, Object info){
		StringBuilder builder = new StringBuilder(message);
		if(info instanceof Symbol){
			builder.append(" in line ").append(((Symbol)info).left);
		}
		System.out.println(builder.toString());
	}
	
	public void report_fatal_error(String message, Object info) throws java.lang.Exception{
		done_parsing();
		report_error(message, info);
	}

	public void syntax_error(Symbol cur_token){
		report_error("\nSyntax error", cur_token);
	}

	public void unrecovered_syntax_error(Symbol cur_token) throws java.lang.Exception{
		report_fatal_error("\nFatal error!", cur_token);
	}

	public void report_info(String message, Object info){
		StringBuilder builder = new StringBuilder(message);
		if(info instanceof Symbol){
			builder.append(" in line ").append(((Symbol)info).left);
		}
		System.out.println(builder.toString());
	}


}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$Parser$actions {
  private final Parser parser;

  /** Constructor */
  CUP$Parser$actions(Parser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Parser$result;

      /* select the action based on the action number */
      switch (CUP$Parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // Mulop ::= MOD 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Mulop",36, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // Mulop ::= DEVIDE 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Mulop",36, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // Mulop ::= TIMES 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Mulop",36, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // Addop ::= MINUS 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Addop",34, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // Addop ::= PLUS 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Addop",34, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // Relop ::= LESS_OR_EQUAL 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Relop",32, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // Relop ::= LESS 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Relop",32, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // Relop ::= GREATER_OR_EQUAL 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Relop",32, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // Relop ::= GREATER 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Relop",32, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // Relop ::= NOT_EQUAL 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Relop",32, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // Relop ::= EQUAL 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Relop",32, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // DesignatorRestPart ::= DOT IDENT 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DesignatorRestPart",39, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // DesignatorRestPart ::= LBRACKET Expr RBRACKET 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DesignatorRestPart",39, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // DesignatorRest ::= DesignatorRestPart 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DesignatorRest",38, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // DesignatorRest ::= DesignatorRest DesignatorRestPart 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DesignatorRest",38, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // Designator ::= IDENT DesignatorRest 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Designator",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // Designator ::= IDENT 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Designator",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // Factor ::= Designator LPAREN ActPars RPAREN 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Factor",37, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // Factor ::= Designator 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Factor",37, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // Factor ::= NEW Type LBRACKET Expr RBRACKET 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Factor",37, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // Factor ::= NEW Type 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Factor",37, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // Factor ::= LPAREN Expr RPAREN 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Factor",37, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // Factor ::= Literal 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Factor",37, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // Term ::= Factor 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Term",35, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // Term ::= Term Mulop Factor 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Term",35, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // ExprRest ::= Term 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ExprRest",33, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // ExprRest ::= ExprRest Addop Term 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ExprRest",33, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // Expr ::= ExprRest 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expr",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // Expr ::= MINUS ExprRest 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expr",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // CondFact ::= Expr 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("CondFact",31, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // CondFact ::= CondFact Relop Expr 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("CondFact",31, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // CondTerm ::= CondFact 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("CondTerm",30, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // CondTerm ::= CondTerm LOGICAL_AND CondFact 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("CondTerm",30, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // Condition ::= CondTerm 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Condition",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // Condition ::= Condition LOGICAL_OR CondTerm 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Condition",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // ActPars ::= Expr 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ActPars",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // ActPars ::= ActPars COMMA Expr 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ActPars",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // LoopHeader ::= WHILE LPAREN Condition RPAREN 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("LoopHeader",40, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // OtherStatement ::= SEMI 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OtherStatement",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // OtherStatement ::= DO Statement WHILE LPAREN Condition RPAREN SEMI 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OtherStatement",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // OtherStatement ::= LBRACE StatementList RBRACE 
            {
              Object RESULT =null;
		 if(parser.inMain) { parser.nStatementBlocks++; parser.nSimpleMainStatements--; }
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OtherStatement",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // OtherStatement ::= RETURN Expr SEMI 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OtherStatement",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // OtherStatement ::= RETURN SEMI 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OtherStatement",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // OtherStatement ::= BREAK SEMI 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OtherStatement",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // OtherStatement ::= PRINT LPAREN Expr COMMA NUMBER_LITERAL RPAREN SEMI 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OtherStatement",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // OtherStatement ::= PRINT LPAREN Expr RPAREN SEMI 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OtherStatement",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // OtherStatement ::= READ LPAREN Designator RPAREN SEMI 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OtherStatement",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // OtherStatement ::= Designator LPAREN ActPars RPAREN NT$6 SEMI 
            {
              Object RESULT =null;
              // propagate RESULT from NT$6
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OtherStatement",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // NT$6 ::= 
            {
              Object RESULT =null;
 if(parser.inMain){parser.nSimpleMainStatements--; parser.nFuncCallsInMain++; System.out.println("FUNC CALL mamu ti");}
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$6",49, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // OtherStatement ::= Designator LPAREN RPAREN NT$5 SEMI 
            {
              Object RESULT =null;
              // propagate RESULT from NT$5
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OtherStatement",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // NT$5 ::= 
            {
              Object RESULT =null;
 if(parser.inMain){parser.nSimpleMainStatements--; parser.nFuncCallsInMain++; System.out.println("FUNC CALL mamu ti");}
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$5",48, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // OtherStatement ::= Designator DECREAMENT SEMI 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OtherStatement",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // OtherStatement ::= Designator INCREAMENT SEMI 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OtherStatement",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // OtherStatement ::= Designator ASSIGNMENT Expr SEMI 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OtherStatement",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // ClosedIf ::= LoopHeader ClosedIf 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ClosedIf",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // ClosedIf ::= LPAREN Condition RPAREN ClosedIf ELSE ClosedIf 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ClosedIf",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // ClosedIf ::= NT$4 OtherStatement 
            {
              Object RESULT =null;
              // propagate RESULT from NT$4
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ClosedIf",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // NT$4 ::= 
            {
              Object RESULT =null;
 if(parser.inMain){ parser.nSimpleMainStatements++; System.out.println("STATEMENT");}
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$4",47, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // OpenIf ::= LoopHeader OpenIf 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OpenIf",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // OpenIf ::= IF LPAREN Condition RPAREN ClosedIf ELSE OpenIf 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OpenIf",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // OpenIf ::= IF LPAREN Condition RPAREN Statement 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OpenIf",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // Statement ::= ClosedIf 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Statement",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // Statement ::= OpenIf 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Statement",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // StatementList ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("StatementList",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // StatementList ::= StatementList Statement 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("StatementList",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // Type ::= IDENT 
            {
              Struct RESULT =null;
		int typeNameleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int typeNameright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String typeName = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
	Obj typeNode = Tab.find((String)typeName);

	if(typeNode == Tab.noObj)
	{
		parser.report_error("No type " + typeName + " in symbol table.", null);
		RESULT = Tab.noType;
	}
	else{
		if(typeNode.getKind() == Obj.Type){
			RESULT = typeNode.getType();
		}
		else{
			parser.report_error("Error in line " + typeNameleft + " : Name " + typeName + " is not type name.", null);
			RESULT = Tab.noType;
		}
	}

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Type",42, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // FormPar ::= Type IDENT 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("FormPar",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // FormParList ::= FormPar 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("FormParList",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // FormParList ::= FormPar COMMA FormParList 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("FormParList",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // FormPars ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("FormPars",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // FormPars ::= FormParList 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("FormPars",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // MethodDeclRest ::= IDENT NT$3 LPAREN FormPars RPAREN VarDeclList LBRACE StatementList RBRACE 
            {
              Object RESULT =null;
              // propagate RESULT from NT$3
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-7)).value;
		int methNameleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)).left;
		int methNameright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)).right;
		String methName = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-8)).value;
		 parser.inProgramParams++; parser.inMain = false; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("MethodDeclRest",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // NT$3 ::= 
            {
              Object RESULT =null;
		int methNameleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int methNameright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String methName = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

 if(parser.inProgramParams>0) { parser.nDefProgramFuncs++; if("main".equals(methName)) parser.inMain = true; }
 else parser.nDefClassMeths++;
 parser.inProgramParams--; 
 

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$3",46, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // MethodDecl ::= VOID MethodDeclRest 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("MethodDecl",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // MethodDecl ::= Type MethodDeclRest 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("MethodDecl",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // MethodDeclList ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("MethodDeclList",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // MethodDeclList ::= MethodDecl MethodDeclList 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("MethodDeclList",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // ClassMemberDecl ::= MethodDecl 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ClassMemberDecl",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // ClassMemberDecl ::= VarDecl 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ClassMemberDecl",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // ClassMemberDeclList ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ClassMemberDeclList",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // ClassMemberDeclList ::= ClassMemberDecl ClassMemberDeclList 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ClassMemberDeclList",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // extendsStm ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("extendsStm",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // extendsStm ::= EXTENDS IDENT 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 parser.dbg("extends " + i);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("extendsStm",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // ClassDecl ::= CLASS IDENT NT$1 extendsStm LBRACE NT$2 ClassMemberDeclList RBRACE 
            {
              Object RESULT =null;
              // propagate RESULT from NT$2
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		 parser.inProgramParams++; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ClassDecl",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // NT$2 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
 parser.inProgramParams--; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$2",45, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // NT$1 ::= 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
 parser.nDeclClasses++; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$1",44, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // VarDeclName ::= IDENT LBRACKET RBRACKET 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		 if(parser.inProgramParams>0) parser.nDeclGlobArrays++; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("VarDeclName",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // VarDeclName ::= IDENT 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 if(parser.inProgramParams>0) parser.nDeclGlobSimpleVars++; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("VarDeclName",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // VarDeclNames ::= VarDeclName 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("VarDeclNames",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // VarDeclNames ::= VarDeclNames COMMA VarDeclName 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("VarDeclNames",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // VarDecl ::= Type VarDeclNames SEMI 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("VarDecl",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // VarDeclList ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("VarDeclList",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // VarDeclList ::= VarDecl VarDeclList 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("VarDeclList",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // Literal ::= STRING_LITERAL 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Literal",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // Literal ::= CHAR_LITERAL 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Literal",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // Literal ::= BOOL_LITERAL 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Literal",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // Literal ::= NUMBER_LITERAL 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Literal",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // ConstDeclName ::= IDENT ASSIGNMENT Literal 
            {
              Object RESULT =null;
		 if(parser.inProgramParams>0) parser.nDeclGlobSimpleConsts++; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ConstDeclName",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // ConstDeclNames ::= ConstDeclName 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ConstDeclNames",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // ConstDeclNames ::= ConstDeclNames COMMA ConstDeclName 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ConstDeclNames",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // ConstDecl ::= CONST Type ConstDeclNames SEMI 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ConstDecl",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // ProgParamDeclPart ::= ClassDecl 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ProgParamDeclPart",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // ProgParamDeclPart ::= VarDecl 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ProgParamDeclPart",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // ProgParamDeclPart ::= ConstDecl 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ProgParamDeclPart",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // ProgParamDeclList ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ProgParamDeclList",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // ProgParamDeclList ::= ProgParamDeclList ProgParamDeclPart 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ProgParamDeclList",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // ProgName ::= IDENT 
            {
              Obj RESULT =null;
		int pnleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int pnright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String pn = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
	System.out.println(pn);
	Tab.openScope();
	RESULT = Tab.insert(Obj.Prog, pn, Tab.noType); 

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ProgName",41, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // $START ::= Program EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = start_val;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Parser$parser.done_parsing();
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // Program ::= PROGRAM ProgName NT$0 ProgParamDeclList LBRACE MethodDeclList RBRACE 
            {
              Object RESULT =null;
              // propagate RESULT from NT$0
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		Obj p = (Obj)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		 
	parser.inProgramParams--;

	Tab.chainLocalSymbols(p);
	Tab.closeScope();

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Program",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // NT$0 ::= 
            {
              Object RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Obj p = (Obj)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
 parser.inProgramParams++; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$0",43, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

