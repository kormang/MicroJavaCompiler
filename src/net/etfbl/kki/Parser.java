
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Wed Jun 17 14:13:04 CEST 2015
//----------------------------------------------------

package net.etfbl.kki;

import java_cup.runtime.*;
import rs.etf.pp1.symboltable.Tab;
import rs.etf.pp1.symboltable.concepts.*;
import java.util.*;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Wed Jun 17 14:13:04 CEST 2015
  */
public class Parser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public Parser() {super();}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\204\000\002\056\002\000\002\002\011\000\002\002" +
    "\004\000\002\040\003\000\002\003\004\000\002\003\002" +
    "\000\002\005\003\000\002\005\003\000\002\005\003\000" +
    "\002\006\006\000\002\006\005\000\002\011\005\000\002" +
    "\011\003\000\002\012\005\000\002\054\003\000\002\054" +
    "\003\000\002\054\003\000\002\054\003\000\002\013\004" +
    "\000\002\013\002\000\002\007\005\000\002\007\005\000" +
    "\002\007\005\000\002\014\005\000\002\014\003\000\002" +
    "\015\003\000\002\015\005\000\002\057\002\000\002\060" +
    "\002\000\002\010\012\000\002\016\004\000\002\016\005" +
    "\000\002\016\002\000\002\017\004\000\002\017\005\000" +
    "\002\017\002\000\002\020\003\000\002\020\003\000\002" +
    "\004\004\000\002\004\002\000\002\021\004\000\002\061" +
    "\002\000\002\021\005\000\002\062\002\000\002\022\013" +
    "\000\002\051\003\000\002\051\002\000\002\052\005\000" +
    "\002\052\003\000\002\052\004\000\002\052\004\000\002" +
    "\023\004\000\002\044\003\000\002\025\004\000\002\025" +
    "\002\000\002\024\003\000\002\024\003\000\002\027\007" +
    "\000\002\027\006\000\002\027\011\000\002\027\010\000" +
    "\002\027\004\000\002\063\002\000\002\030\004\000\002" +
    "\030\011\000\002\030\010\000\002\030\004\000\002\026" +
    "\006\000\002\026\006\000\002\026\006\000\002\026\005" +
    "\000\002\026\005\000\002\064\002\000\002\026\007\000" +
    "\002\065\002\000\002\026\010\000\002\026\007\000\002" +
    "\026\007\000\002\026\011\000\002\026\004\000\002\026" +
    "\004\000\002\026\005\000\002\026\005\000\002\026\011" +
    "\000\002\026\007\000\002\026\003\000\002\034\006\000" +
    "\002\034\005\000\002\053\005\000\002\053\003\000\002" +
    "\053\005\000\002\053\005\000\002\037\005\000\002\037" +
    "\003\000\002\035\005\000\002\035\003\000\002\036\005" +
    "\000\002\036\003\000\002\045\004\000\002\045\003\000" +
    "\002\046\005\000\002\046\003\000\002\047\005\000\002" +
    "\047\003\000\002\050\003\000\002\050\005\000\002\050" +
    "\004\000\002\050\007\000\002\050\003\000\002\066\002" +
    "\000\002\050\005\000\002\055\004\000\002\055\005\000" +
    "\002\041\003\000\002\067\002\000\002\041\005\000\002" +
    "\042\004\000\002\042\003\000\002\043\005\000\002\043" +
    "\005\000\002\043\004\000\002\031\003\000\002\031\003" +
    "\000\002\031\003\000\002\031\003\000\002\031\003\000" +
    "\002\031\003\000\002\032\003\000\002\032\003\000\002" +
    "\033\003\000\002\033\003\000\002\033\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\360\000\004\004\005\001\002\000\004\002\362\001" +
    "\002\000\004\060\006\001\002\000\012\010\ufffe\021\ufffe" +
    "\046\ufffe\060\ufffe\001\002\000\012\010\001\021\001\046" +
    "\001\060\001\001\002\000\012\010\ufffc\021\ufffc\046\ufffc" +
    "\060\ufffc\001\002\000\012\010\020\021\022\046\013\060" +
    "\014\001\002\000\006\003\336\060\346\001\002\000\010" +
    "\007\056\047\uffda\060\014\001\002\000\052\003\uffcd\022" +
    "\uffcd\023\uffcd\026\uffcd\027\uffcd\030\uffcd\031\uffcd\032\uffcd" +
    "\033\uffcd\034\uffcd\035\uffcd\037\uffcd\040\uffcd\041\uffcd\042" +
    "\uffcd\043\uffcd\045\uffcd\050\uffcd\051\uffcd\060\uffcd\001\002" +
    "\000\012\010\ufffa\021\ufffa\046\ufffa\060\ufffa\001\002\000" +
    "\012\010\ufff9\021\ufff9\046\ufff9\060\ufff9\001\002\000\012" +
    "\010\ufffb\021\ufffb\046\ufffb\060\ufffb\001\002\000\004\060" +
    "\042\001\002\000\012\010\ufffd\021\ufffd\046\ufffd\060\ufffd" +
    "\001\002\000\006\003\024\060\014\001\002\000\004\060" +
    "\026\001\002\000\004\042\025\001\002\000\012\010\ufff7" +
    "\021\ufff7\046\ufff7\060\ufff7\001\002\000\004\036\034\001" +
    "\002\000\006\042\ufff5\043\ufff5\001\002\000\006\042\032" +
    "\043\031\001\002\000\004\060\026\001\002\000\012\010" +
    "\ufff8\021\ufff8\046\ufff8\060\ufff8\001\002\000\006\042\ufff6" +
    "\043\ufff6\001\002\000\012\053\036\054\040\055\037\056" +
    "\041\001\002\000\006\042\ufff4\043\ufff4\001\002\000\046" +
    "\003\ufff3\022\ufff3\023\ufff3\026\ufff3\027\ufff3\030\ufff3\031" +
    "\ufff3\032\ufff3\033\ufff3\034\ufff3\035\ufff3\037\ufff3\040\ufff3" +
    "\041\ufff3\042\ufff3\043\ufff3\045\ufff3\050\ufff3\001\002\000" +
    "\046\003\ufff1\022\ufff1\023\ufff1\026\ufff1\027\ufff1\030\ufff1" +
    "\031\ufff1\032\ufff1\033\ufff1\034\ufff1\035\ufff1\037\ufff1\040" +
    "\ufff1\041\ufff1\042\ufff1\043\ufff1\045\ufff1\050\ufff1\001\002" +
    "\000\046\003\ufff2\022\ufff2\023\ufff2\026\ufff2\027\ufff2\030" +
    "\ufff2\031\ufff2\032\ufff2\033\ufff2\034\ufff2\035\ufff2\037\ufff2" +
    "\040\ufff2\041\ufff2\042\ufff2\043\ufff2\045\ufff2\050\ufff2\001" +
    "\002\000\046\003\ufff0\022\ufff0\023\ufff0\026\ufff0\027\ufff0" +
    "\030\ufff0\031\ufff0\032\ufff0\033\ufff0\034\ufff0\035\ufff0\037" +
    "\ufff0\040\ufff0\041\ufff0\042\ufff0\043\ufff0\045\ufff0\050\ufff0" +
    "\001\002\000\006\011\uffe6\046\uffe6\001\002\000\006\011" +
    "\044\046\uffe1\001\002\000\006\003\352\060\353\001\002" +
    "\000\004\046\046\001\002\000\012\003\uffe5\007\uffe5\047" +
    "\uffe5\060\uffe5\001\002\000\012\003\051\007\056\047\uffde" +
    "\060\014\001\002\000\006\003\336\060\340\001\002\000" +
    "\012\003\051\007\056\047\uffde\060\014\001\002\000\012" +
    "\003\uffdd\007\uffdd\047\uffdd\060\uffdd\001\002\000\012\003" +
    "\051\007\056\047\uffde\060\014\001\002\000\012\003\uffdc" +
    "\007\uffdc\047\uffdc\060\uffdc\001\002\000\004\047\331\001" +
    "\002\000\004\060\uffd8\001\002\000\004\060\061\001\002" +
    "\000\012\003\uffd7\007\uffd7\047\uffd7\060\uffd7\001\002\000" +
    "\004\044\uffd6\001\002\000\004\044\063\001\002\000\010" +
    "\003\066\045\uffd3\060\014\001\002\000\004\045\uffd4\001" +
    "\002\000\004\060\330\001\002\000\006\043\326\045\327" +
    "\001\002\000\004\045\073\001\002\000\006\043\071\045" +
    "\uffd1\001\002\000\006\003\066\060\014\001\002\000\004" +
    "\045\uffd2\001\002\000\006\046\uffee\060\014\001\002\000" +
    "\004\046\077\001\002\000\006\046\uffee\060\014\001\002" +
    "\000\004\046\uffef\001\002\000\032\003\uffcb\005\uffcb\006" +
    "\uffcb\013\uffcb\015\uffcb\016\uffcb\017\uffcb\020\uffcb\042\uffcb" +
    "\046\uffcb\047\uffcb\060\uffcb\001\002\000\032\003\uffc3\005" +
    "\uffc3\006\uffc3\013\107\015\106\016\uffc3\017\uffc3\020\uffc3" +
    "\042\uffc3\046\uffc3\047\105\060\uffc3\001\002\000\032\003" +
    "\uffc9\005\uffc9\006\uffc9\013\uffc9\015\uffc9\016\uffc9\017\uffc9" +
    "\020\uffc9\042\uffc9\046\uffc9\047\uffc9\060\uffc9\001\002\000" +
    "\032\003\uffcc\005\uffcc\006\uffcc\013\uffcc\015\uffcc\016\uffcc" +
    "\017\uffcc\020\uffcc\042\uffcc\046\uffcc\047\uffcc\060\uffcc\001" +
    "\002\000\030\003\uffc3\005\uffc3\006\uffc3\013\107\015\106" +
    "\016\uffc3\017\uffc3\020\uffc3\042\uffc3\046\uffc3\060\uffc3\001" +
    "\002\000\032\003\uffca\005\uffca\006\uffca\013\uffca\015\uffca" +
    "\016\uffca\017\uffca\020\uffca\042\uffca\046\uffca\047\uffca\060" +
    "\uffca\001\002\000\012\003\uffd5\007\uffd5\047\uffd5\060\uffd5" +
    "\001\002\000\006\003\317\044\320\001\002\000\006\003" +
    "\300\044\301\001\002\000\024\003\117\005\120\006\121" +
    "\016\111\017\123\020\122\042\115\046\112\060\113\001" +
    "\002\000\004\044\274\001\002\000\032\003\uffcb\005\uffcb" +
    "\006\uffcb\013\uffcb\015\uffcb\016\uffcb\017\uffcb\020\uffcb\042" +
    "\uffcb\046\uffcb\047\uffcb\060\uffcb\001\002\000\062\003\uff90" +
    "\022\uff90\023\uff90\024\uff90\025\uff90\026\uff90\027\uff90\030" +
    "\uff90\031\uff90\032\uff90\033\uff90\034\uff90\035\uff90\036\uff90" +
    "\037\uff90\040\uff90\041\uff90\042\uff90\043\uff90\044\uff90\045" +
    "\uff90\050\uff90\051\uff8f\052\uff8f\001\002\000\012\024\241" +
    "\025\237\036\236\044\240\001\002\000\034\003\uffac\005" +
    "\uffac\006\uffac\013\uffac\014\uffac\015\uffac\016\uffac\017\uffac" +
    "\020\uffac\042\uffac\046\uffac\047\uffac\060\uffac\001\002\000" +
    "\034\003\uffc2\005\uffc2\006\uffc2\013\uffc2\014\uffc2\015\uffc2" +
    "\016\uffc2\017\uffc2\020\uffc2\042\uffc2\046\uffc2\047\uffc2\060" +
    "\uffc2\001\002\000\004\036\233\001\002\000\004\044\223" +
    "\001\002\000\024\012\133\035\131\042\221\044\144\053" +
    "\036\054\040\055\037\056\041\060\113\001\002\000\030" +
    "\003\uffc3\005\uffc3\006\uffc3\013\107\015\106\016\uffc3\017" +
    "\uffc3\020\uffc3\042\uffc3\046\uffc3\060\uffc3\001\002\000\004" +
    "\042\124\001\002\000\034\003\uffb2\005\uffb2\006\uffb2\013" +
    "\uffb2\014\uffb2\015\uffb2\016\uffb2\017\uffb2\020\uffb2\042\uffb2" +
    "\046\uffb2\047\uffb2\060\uffb2\001\002\000\004\015\126\001" +
    "\002\000\006\003\127\044\130\001\002\000\004\045\217" +
    "\001\002\000\022\012\133\035\131\044\144\053\036\054" +
    "\040\055\037\056\041\060\113\001\002\000\020\012\133" +
    "\044\144\053\036\054\040\055\037\056\041\060\113\001" +
    "\002\000\024\022\uffa0\023\uffa0\026\uffa0\027\uffa0\030\uffa0" +
    "\031\uffa0\032\uffa0\033\uffa0\045\uffa0\001\002\000\004\060" +
    "\014\001\002\000\050\003\uff95\022\uff95\023\uff95\026\uff95" +
    "\027\uff95\030\uff95\031\uff95\032\uff95\033\uff95\034\uff95\035" +
    "\uff95\037\uff95\040\uff95\041\uff95\042\uff95\043\uff95\044\uff94" +
    "\045\uff95\050\uff95\001\002\000\046\003\uff99\022\uff99\023" +
    "\uff99\026\uff99\027\uff99\030\uff99\031\uff99\032\uff99\033\uff99" +
    "\034\uff99\035\uff99\037\uff99\040\uff99\041\uff99\042\uff99\043" +
    "\uff99\045\uff99\050\uff99\001\002\000\006\022\172\045\173" +
    "\001\002\000\024\022\uffa2\023\uffa2\026\155\027\151\030" +
    "\154\031\153\032\156\033\152\045\uffa2\001\002\000\046" +
    "\003\uff9c\022\uff9c\023\uff9c\026\uff9c\027\uff9c\030\uff9c\031" +
    "\uff9c\032\uff9c\033\uff9c\034\uff9c\035\uff9c\037\170\040\166" +
    "\041\165\042\uff9c\043\uff9c\045\uff9c\050\uff9c\001\002\000" +
    "\046\003\uff9a\022\uff9a\023\uff9a\026\uff9a\027\uff9a\030\uff9a" +
    "\031\uff9a\032\uff9a\033\uff9a\034\uff9a\035\uff9a\037\uff9a\040" +
    "\uff9a\041\uff9a\042\uff9a\043\uff9a\045\uff9a\050\uff9a\001\002" +
    "\000\040\003\uff9e\022\uff9e\023\uff9e\026\uff9e\027\uff9e\030" +
    "\uff9e\031\uff9e\032\uff9e\033\uff9e\034\161\035\162\042\uff9e" +
    "\043\uff9e\045\uff9e\050\uff9e\001\002\000\010\022\uffa4\023" +
    "\147\045\uffa4\001\002\000\022\012\133\035\131\044\144" +
    "\053\036\054\040\055\037\056\041\060\113\001\002\000" +
    "\004\045\146\001\002\000\046\003\uff98\022\uff98\023\uff98" +
    "\026\uff98\027\uff98\030\uff98\031\uff98\032\uff98\033\uff98\034" +
    "\uff98\035\uff98\037\uff98\040\uff98\041\uff98\042\uff98\043\uff98" +
    "\045\uff98\050\uff98\001\002\000\022\012\133\035\131\044" +
    "\144\053\036\054\040\055\037\056\041\060\113\001\002" +
    "\000\024\022\uffa3\023\uffa3\026\155\027\151\030\154\031" +
    "\153\032\156\033\152\045\uffa3\001\002\000\022\012\uff87" +
    "\035\uff87\044\uff87\053\uff87\054\uff87\055\uff87\056\uff87\060" +
    "\uff87\001\002\000\022\012\uff83\035\uff83\044\uff83\053\uff83" +
    "\054\uff83\055\uff83\056\uff83\060\uff83\001\002\000\022\012" +
    "\uff85\035\uff85\044\uff85\053\uff85\054\uff85\055\uff85\056\uff85" +
    "\060\uff85\001\002\000\022\012\uff86\035\uff86\044\uff86\053" +
    "\uff86\054\uff86\055\uff86\056\uff86\060\uff86\001\002\000\022" +
    "\012\uff88\035\uff88\044\uff88\053\uff88\054\uff88\055\uff88\056" +
    "\uff88\060\uff88\001\002\000\022\012\uff84\035\uff84\044\uff84" +
    "\053\uff84\054\uff84\055\uff84\056\uff84\060\uff84\001\002\000" +
    "\022\012\133\035\131\044\144\053\036\054\040\055\037" +
    "\056\041\060\113\001\002\000\024\022\uffa1\023\uffa1\026" +
    "\uffa1\027\uffa1\030\uffa1\031\uffa1\032\uffa1\033\uffa1\045\uffa1" +
    "\001\002\000\020\012\uff82\044\uff82\053\uff82\054\uff82\055" +
    "\uff82\056\uff82\060\uff82\001\002\000\020\012\uff81\044\uff81" +
    "\053\uff81\054\uff81\055\uff81\056\uff81\060\uff81\001\002\000" +
    "\020\012\133\044\144\053\036\054\040\055\037\056\041" +
    "\060\113\001\002\000\046\003\uff9d\022\uff9d\023\uff9d\026" +
    "\uff9d\027\uff9d\030\uff9d\031\uff9d\032\uff9d\033\uff9d\034\uff9d" +
    "\035\uff9d\037\170\040\166\041\165\042\uff9d\043\uff9d\045" +
    "\uff9d\050\uff9d\001\002\000\020\012\uff7e\044\uff7e\053\uff7e" +
    "\054\uff7e\055\uff7e\056\uff7e\060\uff7e\001\002\000\020\012" +
    "\uff7f\044\uff7f\053\uff7f\054\uff7f\055\uff7f\056\uff7f\060\uff7f" +
    "\001\002\000\020\012\133\044\144\053\036\054\040\055" +
    "\037\056\041\060\113\001\002\000\020\012\uff80\044\uff80" +
    "\053\uff80\054\uff80\055\uff80\056\uff80\060\uff80\001\002\000" +
    "\046\003\uff9b\022\uff9b\023\uff9b\026\uff9b\027\uff9b\030\uff9b" +
    "\031\uff9b\032\uff9b\033\uff9b\034\uff9b\035\uff9b\037\uff9b\040" +
    "\uff9b\041\uff9b\042\uff9b\043\uff9b\045\uff9b\050\uff9b\001\002" +
    "\000\022\012\133\035\131\044\144\053\036\054\040\055" +
    "\037\056\041\060\113\001\002\000\004\042\174\001\002" +
    "\000\034\003\uffae\005\uffae\006\uffae\013\uffae\014\uffae\015" +
    "\uffae\016\uffae\017\uffae\020\uffae\042\uffae\046\uffae\047\uffae" +
    "\060\uffae\001\002\000\010\022\uffa5\023\147\045\uffa5\001" +
    "\002\000\004\044\200\001\002\000\046\003\uff93\022\uff93" +
    "\023\uff93\026\uff93\027\uff93\030\uff93\031\uff93\032\uff93\033" +
    "\uff93\034\uff93\035\uff93\037\uff93\040\uff93\041\uff93\042\uff93" +
    "\043\uff93\045\uff93\050\uff93\001\002\000\024\012\133\035" +
    "\131\044\144\045\203\053\036\054\040\055\037\056\041" +
    "\060\113\001\002\000\010\003\uffa8\043\uffa8\045\uffa8\001" +
    "\002\000\010\003\206\043\204\045\205\001\002\000\046" +
    "\003\uff92\022\uff92\023\uff92\026\uff92\027\uff92\030\uff92\031" +
    "\uff92\032\uff92\033\uff92\034\uff92\035\uff92\037\uff92\040\uff92" +
    "\041\uff92\042\uff92\043\uff92\045\uff92\050\uff92\001\002\000" +
    "\022\012\133\035\131\044\144\053\036\054\040\055\037" +
    "\056\041\060\113\001\002\000\046\003\uff91\022\uff91\023" +
    "\uff91\026\uff91\027\uff91\030\uff91\031\uff91\032\uff91\033\uff91" +
    "\034\uff91\035\uff91\037\uff91\040\uff91\041\uff91\042\uff91\043" +
    "\uff91\045\uff91\050\uff91\001\002\000\006\043\207\045\210" +
    "\001\002\000\010\003\uffa7\043\uffa7\045\uffa7\001\002\000" +
    "\010\003\uffa6\043\uffa6\045\uffa6\001\002\000\010\003\uffa9" +
    "\043\uffa9\045\uffa9\001\002\000\050\003\uff97\022\uff97\023" +
    "\uff97\026\uff97\027\uff97\030\uff97\031\uff97\032\uff97\033\uff97" +
    "\034\uff97\035\uff97\037\uff97\040\uff97\041\uff97\042\uff97\043" +
    "\uff97\045\uff97\050\uff97\051\213\001\002\000\022\012\133" +
    "\035\131\044\144\053\036\054\040\055\037\056\041\060" +
    "\113\001\002\000\004\050\215\001\002\000\046\003\uff96" +
    "\022\uff96\023\uff96\026\uff96\027\uff96\030\uff96\031\uff96\032" +
    "\uff96\033\uff96\034\uff96\035\uff96\037\uff96\040\uff96\041\uff96" +
    "\042\uff96\043\uff96\045\uff96\050\uff96\001\002\000\040\003" +
    "\uff9f\022\uff9f\023\uff9f\026\uff9f\027\uff9f\030\uff9f\031\uff9f" +
    "\032\uff9f\033\uff9f\034\161\035\162\042\uff9f\043\uff9f\045" +
    "\uff9f\050\uff9f\001\002\000\034\003\uffad\005\uffad\006\uffad" +
    "\013\uffad\014\uffad\015\uffad\016\uffad\017\uffad\020\uffad\042" +
    "\uffad\046\uffad\047\uffad\060\uffad\001\002\000\004\042\222" +
    "\001\002\000\034\003\uffb1\005\uffb1\006\uffb1\013\uffb1\014" +
    "\uffb1\015\uffb1\016\uffb1\017\uffb1\020\uffb1\042\uffb1\046\uffb1" +
    "\047\uffb1\060\uffb1\001\002\000\034\003\uffb0\005\uffb0\006" +
    "\uffb0\013\uffb0\014\uffb0\015\uffb0\016\uffb0\017\uffb0\020\uffb0" +
    "\042\uffb0\046\uffb0\047\uffb0\060\uffb0\001\002\000\022\012" +
    "\133\035\131\044\144\053\036\054\040\055\037\056\041" +
    "\060\113\001\002\000\006\043\225\045\226\001\002\000" +
    "\004\053\230\001\002\000\004\042\227\001\002\000\034" +
    "\003\uffb4\005\uffb4\006\uffb4\013\uffb4\014\uffb4\015\uffb4\016" +
    "\uffb4\017\uffb4\020\uffb4\042\uffb4\046\uffb4\047\uffb4\060\uffb4" +
    "\001\002\000\004\045\231\001\002\000\004\042\232\001" +
    "\002\000\034\003\uffb3\005\uffb3\006\uffb3\013\uffb3\014\uffb3" +
    "\015\uffb3\016\uffb3\017\uffb3\020\uffb3\042\uffb3\046\uffb3\047" +
    "\uffb3\060\uffb3\001\002\000\022\012\133\035\131\044\144" +
    "\053\036\054\040\055\037\056\041\060\113\001\002\000" +
    "\004\042\235\001\002\000\034\003\uffbc\005\uffbc\006\uffbc" +
    "\013\uffbc\014\uffbc\015\uffbc\016\uffbc\017\uffbc\020\uffbc\042" +
    "\uffbc\046\uffbc\047\uffbc\060\uffbc\001\002\000\024\003\254" +
    "\012\133\035\131\044\144\053\036\054\040\055\037\056" +
    "\041\060\113\001\002\000\004\042\252\001\002\000\024" +
    "\012\133\035\131\044\144\045\244\053\036\054\040\055" +
    "\037\056\041\060\113\001\002\000\004\042\242\001\002" +
    "\000\034\003\uffbb\005\uffbb\006\uffbb\013\uffbb\014\uffbb\015" +
    "\uffbb\016\uffbb\017\uffbb\020\uffbb\042\uffbb\046\uffbb\047\uffbb" +
    "\060\uffbb\001\002\000\010\003\206\043\204\045\247\001" +
    "\002\000\004\042\uffb9\001\002\000\004\042\246\001\002" +
    "\000\034\003\uffb8\005\uffb8\006\uffb8\013\uffb8\014\uffb8\015" +
    "\uffb8\016\uffb8\017\uffb8\020\uffb8\042\uffb8\046\uffb8\047\uffb8" +
    "\060\uffb8\001\002\000\004\042\uffb7\001\002\000\004\042" +
    "\251\001\002\000\034\003\uffb6\005\uffb6\006\uffb6\013\uffb6" +
    "\014\uffb6\015\uffb6\016\uffb6\017\uffb6\020\uffb6\042\uffb6\046" +
    "\uffb6\047\uffb6\060\uffb6\001\002\000\034\003\uffba\005\uffba" +
    "\006\uffba\013\uffba\014\uffba\015\uffba\016\uffba\017\uffba\020" +
    "\uffba\042\uffba\046\uffba\047\uffba\060\uffba\001\002\000\004" +
    "\042\256\001\002\000\004\042\255\001\002\000\034\003" +
    "\uffbd\005\uffbd\006\uffbd\013\uffbd\014\uffbd\015\uffbd\016\uffbd" +
    "\017\uffbd\020\uffbd\042\uffbd\046\uffbd\047\uffbd\060\uffbd\001" +
    "\002\000\034\003\uffbe\005\uffbe\006\uffbe\013\uffbe\014\uffbe" +
    "\015\uffbe\016\uffbe\017\uffbe\020\uffbe\042\uffbe\046\uffbe\047" +
    "\uffbe\060\uffbe\001\002\000\006\051\262\052\263\001\002" +
    "\000\062\003\uff8e\022\uff8e\023\uff8e\024\uff8e\025\uff8e\026" +
    "\uff8e\027\uff8e\030\uff8e\031\uff8e\032\uff8e\033\uff8e\034\uff8e" +
    "\035\uff8e\036\uff8e\037\uff8e\040\uff8e\041\uff8e\042\uff8e\043" +
    "\uff8e\044\uff8e\045\uff8e\050\uff8e\051\262\052\263\001\002" +
    "\000\062\003\uff8c\022\uff8c\023\uff8c\024\uff8c\025\uff8c\026" +
    "\uff8c\027\uff8c\030\uff8c\031\uff8c\032\uff8c\033\uff8c\034\uff8c" +
    "\035\uff8c\036\uff8c\037\uff8c\040\uff8c\041\uff8c\042\uff8c\043" +
    "\uff8c\044\uff8c\045\uff8c\050\uff8c\051\uff8c\052\uff8c\001\002" +
    "\000\024\003\266\012\133\035\131\044\144\053\036\054" +
    "\040\055\037\056\041\060\113\001\002\000\004\060\264" +
    "\001\002\000\062\003\uff89\022\uff89\023\uff89\024\uff89\025" +
    "\uff89\026\uff89\027\uff89\030\uff89\031\uff89\032\uff89\033\uff89" +
    "\034\uff89\035\uff89\036\uff89\037\uff89\040\uff89\041\uff89\042" +
    "\uff89\043\uff89\044\uff89\045\uff89\050\uff89\051\uff89\052\uff89" +
    "\001\002\000\004\050\270\001\002\000\004\050\267\001" +
    "\002\000\062\003\uff8a\022\uff8a\023\uff8a\024\uff8a\025\uff8a" +
    "\026\uff8a\027\uff8a\030\uff8a\031\uff8a\032\uff8a\033\uff8a\034" +
    "\uff8a\035\uff8a\036\uff8a\037\uff8a\040\uff8a\041\uff8a\042\uff8a" +
    "\043\uff8a\044\uff8a\045\uff8a\050\uff8a\051\uff8a\052\uff8a\001" +
    "\002\000\062\003\uff8b\022\uff8b\023\uff8b\024\uff8b\025\uff8b" +
    "\026\uff8b\027\uff8b\030\uff8b\031\uff8b\032\uff8b\033\uff8b\034" +
    "\uff8b\035\uff8b\036\uff8b\037\uff8b\040\uff8b\041\uff8b\042\uff8b" +
    "\043\uff8b\044\uff8b\045\uff8b\050\uff8b\051\uff8b\052\uff8b\001" +
    "\002\000\062\003\uff8d\022\uff8d\023\uff8d\024\uff8d\025\uff8d" +
    "\026\uff8d\027\uff8d\030\uff8d\031\uff8d\032\uff8d\033\uff8d\034" +
    "\uff8d\035\uff8d\036\uff8d\037\uff8d\040\uff8d\041\uff8d\042\uff8d" +
    "\043\uff8d\044\uff8d\045\uff8d\050\uff8d\051\uff8d\052\uff8d\001" +
    "\002\000\032\003\uffc3\005\uffc3\006\uffc3\013\107\015\106" +
    "\016\uffc3\017\uffc3\020\uffc3\042\uffc3\046\uffc3\047\273\060" +
    "\uffc3\001\002\000\034\003\uffaf\005\uffaf\006\uffaf\013\uffaf" +
    "\014\uffaf\015\uffaf\016\uffaf\017\uffaf\020\uffaf\042\uffaf\046" +
    "\uffaf\047\uffaf\060\uffaf\001\002\000\004\060\113\001\002" +
    "\000\004\045\276\001\002\000\004\042\277\001\002\000" +
    "\034\003\uffb5\005\uffb5\006\uffb5\013\uffb5\014\uffb5\015\uffb5" +
    "\016\uffb5\017\uffb5\020\uffb5\042\uffb5\046\uffb5\047\uffb5\060" +
    "\uffb5\001\002\000\004\045\311\001\002\000\022\012\133" +
    "\035\131\044\144\053\036\054\040\055\037\056\041\060" +
    "\113\001\002\000\006\022\172\045\303\001\002\000\030" +
    "\003\uffc3\005\uffc3\006\uffc3\013\107\015\106\016\uffc3\017" +
    "\uffc3\020\uffc3\042\uffc3\046\uffc3\060\uffc3\001\002\000\034" +
    "\003\uffc9\005\uffc9\006\uffc9\013\uffc9\014\306\015\uffc9\016" +
    "\uffc9\017\uffc9\020\uffc9\042\uffc9\046\uffc9\047\uffc9\060\uffc9" +
    "\001\002\000\032\003\uffc8\005\uffc8\006\uffc8\013\uffc8\015" +
    "\uffc8\016\uffc8\017\uffc8\020\uffc8\042\uffc8\046\uffc8\047\uffc8" +
    "\060\uffc8\001\002\000\030\003\uffc3\005\uffc3\006\uffc3\013" +
    "\107\015\106\016\uffc3\017\uffc3\020\uffc3\042\uffc3\046\uffc3" +
    "\060\uffc3\001\002\000\034\003\uffc1\005\uffc1\006\uffc1\013" +
    "\uffc1\014\uffc1\015\uffc1\016\uffc1\017\uffc1\020\uffc1\042\uffc1" +
    "\046\uffc1\047\uffc1\060\uffc1\001\002\000\032\003\uffc6\005" +
    "\uffc6\006\uffc6\013\uffc6\015\uffc6\016\uffc6\017\uffc6\020\uffc6" +
    "\042\uffc6\046\uffc6\047\uffc6\060\uffc6\001\002\000\030\003" +
    "\uffc3\005\uffc3\006\uffc3\013\107\015\106\016\uffc3\017\uffc3" +
    "\020\uffc3\042\uffc3\046\uffc3\060\uffc3\001\002\000\034\003" +
    "\uffc9\005\uffc9\006\uffc9\013\uffc9\014\314\015\uffc9\016\uffc9" +
    "\017\uffc9\020\uffc9\042\uffc9\046\uffc9\047\uffc9\060\uffc9\001" +
    "\002\000\032\003\uffc7\005\uffc7\006\uffc7\013\uffc7\015\uffc7" +
    "\016\uffc7\017\uffc7\020\uffc7\042\uffc7\046\uffc7\047\uffc7\060" +
    "\uffc7\001\002\000\030\003\uffc3\005\uffc3\006\uffc3\013\107" +
    "\015\106\016\uffc3\017\uffc3\020\uffc3\042\uffc3\046\uffc3\060" +
    "\uffc3\001\002\000\034\003\uffc0\005\uffc0\006\uffc0\013\uffc0" +
    "\014\uffc0\015\uffc0\016\uffc0\017\uffc0\020\uffc0\042\uffc0\046" +
    "\uffc0\047\uffc0\060\uffc0\001\002\000\032\003\uffc5\005\uffc5" +
    "\006\uffc5\013\uffc5\015\uffc5\016\uffc5\017\uffc5\020\uffc5\042" +
    "\uffc5\046\uffc5\047\uffc5\060\uffc5\001\002\000\004\045\323" +
    "\001\002\000\022\012\133\035\131\044\144\053\036\054" +
    "\040\055\037\056\041\060\113\001\002\000\006\022\172" +
    "\045\322\001\002\000\030\003\uffab\005\uffab\006\uffab\013" +
    "\uffab\015\uffab\016\uffab\017\uffab\020\uffab\042\uffab\046\uffab" +
    "\060\uffab\001\002\000\030\003\uffaa\005\uffaa\006\uffaa\013" +
    "\uffaa\015\uffaa\016\uffaa\017\uffaa\020\uffaa\042\uffaa\046\uffaa" +
    "\060\uffaa\001\002\000\034\003\uffbf\005\uffbf\006\uffbf\013" +
    "\uffbf\014\uffbf\015\uffbf\016\uffbf\017\uffbf\020\uffbf\042\uffbf" +
    "\046\uffbf\047\uffbf\060\uffbf\001\002\000\032\003\uffc4\005" +
    "\uffc4\006\uffc4\013\uffc4\015\uffc4\016\uffc4\017\uffc4\020\uffc4" +
    "\042\uffc4\046\uffc4\047\uffc4\060\uffc4\001\002\000\004\045" +
    "\uffd0\001\002\000\004\045\uffcf\001\002\000\006\043\uffce" +
    "\045\uffce\001\002\000\012\010\uffe4\021\uffe4\046\uffe4\060" +
    "\uffe4\001\002\000\004\047\uffe0\001\002\000\004\047\334" +
    "\001\002\000\004\047\uffdf\001\002\000\012\003\uffd9\007" +
    "\uffd9\047\uffd9\060\uffd9\001\002\000\006\042\351\046\350" +
    "\001\002\000\006\042\345\043\344\001\002\000\012\042" +
    "\uffe8\043\uffe8\044\uffd6\051\342\001\002\000\006\042\uffe9" +
    "\043\uffe9\001\002\000\004\050\343\001\002\000\006\042" +
    "\uffe7\043\uffe7\001\002\000\004\060\346\001\002\000\020" +
    "\003\uffed\007\uffed\010\uffed\021\uffed\046\uffed\047\uffed\060" +
    "\uffed\001\002\000\010\042\uffe8\043\uffe8\051\342\001\002" +
    "\000\006\042\uffea\043\uffea\001\002\000\020\003\uffeb\007" +
    "\uffeb\010\uffeb\021\uffeb\046\uffeb\047\uffeb\060\uffeb\001\002" +
    "\000\020\003\uffec\007\uffec\010\uffec\021\uffec\046\uffec\047" +
    "\uffec\060\uffec\001\002\000\004\046\354\001\002\000\004" +
    "\046\uffe3\001\002\000\004\046\uffe2\001\002\000\004\060" +
    "\061\001\002\000\004\047\361\001\002\000\010\007\056" +
    "\047\uffda\060\014\001\002\000\004\047\uffdb\001\002\000" +
    "\004\002\000\001\002\000\004\002\uffff\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\360\000\004\002\003\001\001\000\002\001\001\000" +
    "\004\040\006\001\001\000\002\001\001\000\004\056\007" +
    "\001\001\000\004\003\010\001\001\000\014\005\020\006" +
    "\016\007\014\010\015\044\011\001\001\000\006\014\336" +
    "\015\340\001\001\000\010\004\355\021\356\044\354\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\044\022\001\001\000\006\011\027\012\026\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\012\032\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\054\034\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\057\042\001" +
    "\001\000\004\016\044\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\060\046\001\001\000\014\007\051\017" +
    "\054\020\052\021\053\044\047\001\001\000\010\014\336" +
    "\015\340\022\334\001\001\000\014\007\051\017\332\020" +
    "\052\021\053\044\047\001\001\000\002\001\001\000\014" +
    "\007\051\017\331\020\052\021\053\044\047\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\061\056\001\001" +
    "\000\004\022\057\001\001\000\002\001\001\000\004\062" +
    "\061\001\001\000\002\001\001\000\012\023\067\044\064" +
    "\051\066\052\063\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\010\023\067\044\064\052\071\001\001\000\002\001" +
    "\001\000\010\007\074\013\073\044\011\001\001\000\002" +
    "\001\001\000\010\007\074\013\075\044\011\001\001\000" +
    "\002\001\001\000\004\025\077\001\001\000\014\024\101" +
    "\027\103\030\100\034\102\063\107\001\001\000\002\001" +
    "\001\000\002\001\001\000\012\027\324\030\323\034\102" +
    "\063\107\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\026\115\041\113" +
    "\001\001\000\002\001\001\000\004\025\271\001\001\000" +
    "\004\067\256\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\016\041\133\045\217\046\141\047\137\050\140\054\134" +
    "\001\001\000\014\024\124\027\103\030\100\034\102\063" +
    "\107\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\024\035" +
    "\142\036\136\037\135\041\133\045\131\046\141\047\137" +
    "\050\140\054\134\001\001\000\014\041\133\046\215\047" +
    "\137\050\140\054\134\001\001\000\002\001\001\000\004" +
    "\044\211\001\001\000\004\066\175\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\031\156\001\001\000\004" +
    "\033\166\001\001\000\002\001\001\000\004\032\162\001" +
    "\001\000\002\001\001\000\016\041\133\045\144\046\141" +
    "\047\137\050\140\054\134\001\001\000\002\001\001\000" +
    "\002\001\001\000\020\036\147\041\133\045\131\046\141" +
    "\047\137\050\140\054\134\001\001\000\004\031\156\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\016\041\133\045\157\046\141\047\137\050\140\054\134" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\012\041\133\047\163\050\140\054\134\001\001" +
    "\000\004\033\166\001\001\000\002\001\001\000\002\001" +
    "\001\000\010\041\133\050\170\054\134\001\001\000\002" +
    "\001\001\000\002\001\001\000\022\035\174\036\136\041" +
    "\133\045\131\046\141\047\137\050\140\054\134\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\055\176\001\001\000\002\001\001\000\020\041\133" +
    "\045\200\046\141\047\137\050\140\053\201\054\134\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\016\041\133\045\210\046\141\047\137\050\140\054" +
    "\134\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\016\041\133\045\213\046\141\047\137\050\140" +
    "\054\134\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\032\162\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\016\041\133\045" +
    "\223\046\141\047\137\050\140\054\134\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\016\041\133\045\233\046\141\047\137\050\140\054" +
    "\134\001\001\000\002\001\001\000\002\001\001\000\016" +
    "\041\133\045\252\046\141\047\137\050\140\054\134\001" +
    "\001\000\002\001\001\000\020\041\133\045\200\046\141" +
    "\047\137\050\140\053\242\054\134\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\064\244" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\065" +
    "\247\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\042\257\043\260\001\001" +
    "\000\004\043\270\001\001\000\002\001\001\000\016\041" +
    "\133\045\264\046\141\047\137\050\140\054\134\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\014\024\101\027\103\030\100\034\102\063" +
    "\107\001\001\000\002\001\001\000\004\041\274\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\024\035\142\036\136\037\301\041\133" +
    "\045\131\046\141\047\137\050\140\054\134\001\001\000" +
    "\002\001\001\000\014\024\304\027\103\030\303\034\102" +
    "\063\107\001\001\000\002\001\001\000\002\001\001\000" +
    "\012\027\307\030\306\034\102\063\107\001\001\000\002" +
    "\001\001\000\002\001\001\000\014\024\312\027\103\030" +
    "\311\034\102\063\107\001\001\000\002\001\001\000\002" +
    "\001\001\000\012\027\315\030\314\034\102\063\107\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\024\035\142\036\136\037\320\041\133\045\131\046" +
    "\141\047\137\050\140\054\134\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\062\061\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\015\346" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\022\334\001" +
    "\001\000\002\001\001\000\010\004\357\021\356\044\354" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 2;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


  /** User initialization code. */
  public void user_init() throws java.lang.Exception
    {

	Tab.init();
	
	Tab.currentScope.addToLocals(new Obj(Obj.Type, "string", Parser.String));
	Tab.currentScope.addToLocals(new Obj(Obj.Type, "bool", Parser.Bool));

    }

  /** Scan to get the next Symbol. */
  public java_cup.runtime.Symbol scan()
    throws java.lang.Exception
    {

	Symbol symbol = this.getScanner().next_token();
	/*if(symbol != null && symbol.value != null){
		System.out.println(symbol.toString() + " " + symbol.value.toString());
	}*/
	if(symbol.sym == sym.INVALID){
		System.err.println("INVALID symbol");
		symbol = this.getScanner().next_token();
	}
	return symbol;

    }



	//level A
	int nDeclGlobSimpleVars;
	int nDeclGlobSimpleConsts;
	int nSimpleMainStatements;
	int nStatementBlocks;
	
	//level B
	int nDefProgramFuncs;
	int nDeclGlobArrays;
	int nFuncCallsInMain;
	
	//level C
	int nDeclClasses;
	int nDefClassMeths;
	int nObjInsts;
	
	//flags
	int inProgramParams;
	boolean inMain;
	
	public static Struct String = new Struct(Struct.Array, Tab.charType);
	public static Struct Bool = new Struct(Struct.Bool);
	
	public void dbg(Object o){
		System.out.println(o);
	}
	
	public void report_error(String message, Object info){
		StringBuilder builder = new StringBuilder(message);
		if(info instanceof Symbol){
			builder.append(" in line ").append(((Symbol)info).left);
		}
		System.out.println(builder.toString());
	}
	
	public void report_fatal_error(String message, Object info) throws java.lang.Exception{
		done_parsing();
		report_error(message, info);
	}
	
	public void report_semanthic_error(String message, Object info) throws java.lang.Exception {
		report_error(message, info);
	}

	public void syntax_error(Symbol cur_token){
		report_error("\nSyntax error", cur_token);
	}

	public void unrecovered_syntax_error(Symbol cur_token) throws java.lang.Exception{
		report_fatal_error("\nFatal error!", cur_token);
	}

	public void report_info(String message, Object info){
		StringBuilder builder = new StringBuilder(message);
		if(info instanceof Symbol){
			builder.append(" in line ").append(((Symbol)info).left);
		}
		System.out.println(builder.toString());
	}


}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$Parser$actions {



		static class LiteralHolder {
			public Object value;
			public Struct type;
			public LiteralHolder(Object value, Struct type){
				this.value = value; this.type = type;
			}
		}


		Struct currentType;
		int isVoid; // -1 not void, 0 undefined, 1 void
		Obj currentMeth;
		Obj currentMethBeingCalled;
		int currentActPar;
		Obj currentDesignator;
		
		String[] kinds = {"constant", "variable", "type", "method", "field", "element", "program"};
		
		Obj findLocal(Obj container, String localName){
			Collection<Obj> locals = container.getLocalSymbols();
			for(Obj l : locals){
				if(l.getName().equals(localName)){
					return l;
				}
			}
			
			return Tab.noObj;
			
		}
		
		boolean assignableTo(Struct src, Struct dest){
			return src.assignableTo(dest);
		}

		Obj getLocalAt(Obj ob, int pos){
			return ((Obj)ob.getLocalSymbols().toArray()[pos]);
		}		
		

  private final Parser parser;

  /** Constructor */
  CUP$Parser$actions(Parser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Parser$result;

      /* select the action based on the action number */
      switch (CUP$Parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 131: // Mulop ::= MOD 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Mulop",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 130: // Mulop ::= DEVIDE 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Mulop",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 129: // Mulop ::= TIMES 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Mulop",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // Addop ::= MINUS 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Addop",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // Addop ::= PLUS 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Addop",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // Relop ::= LESS_OR_EQUAL 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Relop",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // Relop ::= LESS 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Relop",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // Relop ::= GREATER_OR_EQUAL 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Relop",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // Relop ::= GREATER 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Relop",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // Relop ::= NOT_EQUAL 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Relop",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // Relop ::= EQUAL 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Relop",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // DesignatorRestPart ::= DOT IDENT 
            {
              Obj RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
					 	//pristup polju ili poziv metode currentDesignator-a
					 	Obj local = findLocal(currentDesignator, i);
					 	RESULT = local;
					 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DesignatorRestPart",33, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // DesignatorRestPart ::= LBRACKET error RBRACKET 
            {
              Obj RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DesignatorRestPart",33, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // DesignatorRestPart ::= LBRACKET Expr RBRACKET 
            {
              Obj RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Struct s = (Struct)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
					 	//indeksiranje currentDesignator-a
					 	if (currentDesignator.getType().getKind()==Struct.Array){
					 		RESULT=new Obj(Obj.Elem, "", currentDesignator.getType().getElemType());
					 	} else {
					 		RESULT = Tab.noObj;
					 	}
					 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DesignatorRestPart",33, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // DesignatorRest ::= DesignatorRestPart 
            {
              Obj RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Obj r = (Obj)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = r; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DesignatorRest",32, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // DesignatorRest ::= DesignatorRest DesignatorRestPart 
            {
              Obj RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Obj r = (Obj)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = r; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DesignatorRest",32, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // Designator ::= IDENT NT$9 DesignatorRest 
            {
              Obj RESULT =null;
              // propagate RESULT from NT$9
                RESULT = (Obj) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Obj r = (Obj)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
			 	RESULT = r;
			 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Designator",31, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // NT$9 ::= 
            {
              Obj RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
 currentDesignator = Tab.find(i); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$9",53, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // Designator ::= IDENT 
            {
              Obj RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
					Obj ob = Tab.find(i);
					if(ob != Tab.noObj){
						parser.report_info(ileft+" : Used " + kinds[ob.getKind()] + " " + i + " level: " + ob.getLevel(), null);
					}
					RESULT = ob;
				
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Designator",31, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // ParensAndActPars ::= LPAREN ActPars RPAREN 
            {
              Integer RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Integer n = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = n; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ParensAndActPars",43, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // ParensAndActPars ::= LPAREN RPAREN 
            {
              Integer RESULT =null;
		 RESULT = new Integer(0); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ParensAndActPars",43, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // Factor ::= Designator NT$8 ParensAndActPars 
            {
              Struct RESULT =null;
              // propagate RESULT from NT$8
                RESULT = (Struct) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Obj d = (Obj)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Integer n = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 if(d.getKind() != Obj.Meth || d.getLevel() != 0) { parser.report_info(dleft+" : number of parameters does not match." ,null); RESULT = Tab.noType; } else { RESULT = d.getType(); }  
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Factor",38, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // NT$8 ::= 
            {
              Struct RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Obj d = (Obj)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

			if(d.getKind() == Obj.Meth){
				currentMethBeingCalled = d; currentActPar = 0; 
			} else {
				parser.report_info(dleft+" : " + d.getName() + " is not method.", null);
				//currentMethBeingCalled = null;
			}
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$8",52, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // Factor ::= Designator 
            {
              Struct RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Obj d = (Obj)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = d.getType(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Factor",38, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // Factor ::= NEW Type LBRACKET Expr RBRACKET 
            {
              Struct RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Struct t = (Struct)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Struct e = (Struct)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 if(e.getKind() == Struct.Int) RESULT = new Struct(Struct.Array, t); else { RESULT = Tab.noType; parser.report_info(eleft+" : Array index must be of type int.",null); } 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Factor",38, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // Factor ::= NEW Type 
            {
              Struct RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Struct t = (Struct)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 parser.nObjInsts++; RESULT = t; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Factor",38, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // Factor ::= LPAREN Expr RPAREN 
            {
              Struct RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Struct t = (Struct)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT  = t; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Factor",38, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // Factor ::= Literal 
            {
              Struct RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		LiteralHolder l = (LiteralHolder)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = l.type; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Factor",38, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // Term ::= Factor 
            {
              Struct RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Struct f = (Struct)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = f; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Term",37, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // Term ::= Term Mulop Factor 
            {
              Struct RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Struct t = (Struct)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Struct f = (Struct)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
			if (t.getKind() == Struct.Int && f.getKind() == Struct.Int) {
				RESULT = t;
			} else {
				RESULT = Tab.noType;
			}
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Term",37, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // ExprRest ::= Term 
            {
              Struct RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Struct t = (Struct)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = t; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ExprRest",36, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // ExprRest ::= ExprRest Addop Term 
            {
              Struct RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Struct r = (Struct)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Struct t = (Struct)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
				if(r.compatibleWith(t)){
					RESULT = r;
				} else {
					RESULT = Tab.noType;
				}
			
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ExprRest",36, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // Expr ::= ExprRest 
            {
              Struct RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Struct r = (Struct)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = r; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expr",35, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // Expr ::= MINUS ExprRest 
            {
              Struct RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Struct r = (Struct)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = r; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expr",35, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // CondFact ::= Expr 
            {
              Struct RESULT =null;
		int etleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int etright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Struct et = (Struct)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = et; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("CondFact",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // CondFact ::= CondFact Relop Expr 
            {
              Struct RESULT =null;
		int ftleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int ftright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Struct ft = (Struct)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int etleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int etright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Struct et = (Struct)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
			//TODO: here should be more complicated scenario than this
			if(et.getKind() != Struct.Int){
				parser.report_semanthic_error(etleft + " : int type expected. ", null);
				RESULT = Tab.noType;
			} else {
				if(ft.getKind() == Struct.Int){
					RESULT = Parser.Bool;
				} else {
					RESULT = ft;
				}
			}
				
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("CondFact",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // CondTerm ::= CondFact 
            {
              Struct RESULT =null;
		int ftleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int ftright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Struct ft = (Struct)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		if(ft.getKind() != Struct.Bool) { parser.report_semanthic_error(ftleft + " : bool type expected. ", null); RESULT = Tab.noType; } else RESULT = ft; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("CondTerm",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // CondTerm ::= CondTerm LOGICAL_AND CondFact 
            {
              Struct RESULT =null;
		int ttleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int ttright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Struct tt = (Struct)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int ftleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int ftright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Struct ft = (Struct)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 if(ft.getKind() != Struct.Bool) { parser.report_semanthic_error(ftleft + " : int type expected. ", null); RESULT = Tab.noType; } else RESULT = tt; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("CondTerm",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // Condition ::= CondTerm 
            {
              Struct RESULT =null;
		int ctleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int ctright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Struct ct = (Struct)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 if(ct.getKind() != Struct.Bool) { parser.report_semanthic_error(ctleft + " : bool type expected. ", null); RESULT = Tab.noType; } else RESULT = ct; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Condition",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // Condition ::= Condition LOGICAL_OR CondTerm 
            {
              Struct RESULT =null;
		 /* TODO: maybe something more */ 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Condition",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // ActPars ::= ActPars error RPAREN 
            {
              Integer RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ActPars",41, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // ActPars ::= ActPars error COMMA 
            {
              Integer RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ActPars",41, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // ActPars ::= Expr 
            {
              Integer RESULT =null;
		int ptleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int ptright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Struct pt = (Struct)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Integer(0); if(!assignableTo(getLocalAt(currentMethBeingCalled, RESULT).getType(), pt)){parser.report_semanthic_error(ptleft +" : Parameter " + RESULT + " does not match required type", null);} 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ActPars",41, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // ActPars ::= ActPars COMMA Expr 
            {
              Integer RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Integer n = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int ptleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int ptright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Struct pt = (Struct)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = n + 1; if(!assignableTo(getLocalAt(currentMethBeingCalled, RESULT).getType(), pt)){parser.report_semanthic_error(ptleft +" : Parameter " + RESULT + " does not match required type", null);} 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ActPars",41, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // LoopHeader ::= WHILE error RPAREN 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("LoopHeader",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // LoopHeader ::= WHILE LPAREN Condition RPAREN 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("LoopHeader",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // OtherStatement ::= SEMI 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OtherStatement",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // OtherStatement ::= DO Statement WHILE error RPAREN 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OtherStatement",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // OtherStatement ::= DO Statement WHILE LPAREN Condition RPAREN SEMI 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OtherStatement",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // OtherStatement ::= LBRACE StatementList RBRACE 
            {
              Object RESULT =null;
		 if(parser.inMain) { parser.nStatementBlocks++; parser.nSimpleMainStatements--; }
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OtherStatement",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // OtherStatement ::= RETURN Expr SEMI 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OtherStatement",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // OtherStatement ::= RETURN SEMI 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OtherStatement",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // OtherStatement ::= BREAK SEMI 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OtherStatement",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // OtherStatement ::= PRINT LPAREN Expr COMMA NUMBER_LITERAL RPAREN SEMI 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OtherStatement",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // OtherStatement ::= PRINT LPAREN Expr RPAREN SEMI 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OtherStatement",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // OtherStatement ::= READ LPAREN Designator RPAREN SEMI 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OtherStatement",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // OtherStatement ::= Designator LPAREN ActPars RPAREN NT$7 SEMI 
            {
              Object RESULT =null;
              // propagate RESULT from NT$7
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OtherStatement",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // NT$7 ::= 
            {
              Object RESULT =null;
 if(parser.inMain){parser.nSimpleMainStatements--; parser.nFuncCallsInMain++; System.out.println("FUNC CALL mamu ti");}
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$7",51, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // OtherStatement ::= Designator LPAREN RPAREN NT$6 SEMI 
            {
              Object RESULT =null;
              // propagate RESULT from NT$6
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OtherStatement",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // NT$6 ::= 
            {
              Object RESULT =null;
 if(parser.inMain){parser.nSimpleMainStatements--; parser.nFuncCallsInMain++; System.out.println("FUNC CALL mamu ti");}
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$6",50, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // OtherStatement ::= Designator DECREAMENT SEMI 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OtherStatement",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // OtherStatement ::= Designator INCREAMENT SEMI 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OtherStatement",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // OtherStatement ::= error ASSIGNMENT Expr SEMI 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OtherStatement",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // OtherStatement ::= Designator ASSIGNMENT error SEMI 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OtherStatement",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // OtherStatement ::= Designator ASSIGNMENT Expr SEMI 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OtherStatement",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // ClosedIf ::= LoopHeader ClosedIf 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ClosedIf",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // ClosedIf ::= IF error RPAREN ClosedIf ELSE ClosedIf 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ClosedIf",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // ClosedIf ::= IF LPAREN Condition RPAREN ClosedIf ELSE ClosedIf 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ClosedIf",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // ClosedIf ::= NT$5 OtherStatement 
            {
              Object RESULT =null;
              // propagate RESULT from NT$5
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ClosedIf",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // NT$5 ::= 
            {
              Object RESULT =null;
 if(parser.inMain){ parser.nSimpleMainStatements++; System.out.println("STATEMENT");}
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$5",49, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // OpenIf ::= LoopHeader OpenIf 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OpenIf",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // OpenIf ::= IF error RPAREN ClosedIf ELSE OpenIf 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OpenIf",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // OpenIf ::= IF LPAREN Condition RPAREN ClosedIf ELSE OpenIf 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OpenIf",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // OpenIf ::= IF error RPAREN Statement 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OpenIf",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // OpenIf ::= IF LPAREN Condition RPAREN Statement 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OpenIf",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // Statement ::= ClosedIf 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Statement",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // Statement ::= OpenIf 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Statement",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // StatementList ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("StatementList",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // StatementList ::= StatementList Statement 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("StatementList",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // Type ::= IDENT 
            {
              Struct RESULT =null;
		int typeNameleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int typeNameright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String typeName = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
	Obj typeNode = Tab.find(typeName);

	if(typeNode == Tab.noObj)
	{
		parser.report_error("No type " + typeName + " in symbol table.", null);
		RESULT = Tab.noType;
	}
	else{
		if(typeNode.getKind() == Obj.Type){
			RESULT = typeNode.getType();
		}
		else{
			parser.report_error("Error in line " + typeNameleft + " : Name " + typeName + " is not type name.", null);
			RESULT = Tab.noType;
		}
	}
	currentType = RESULT;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Type",34, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // FormPar ::= Type IDENT 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("FormPar",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // FormParList ::= error RPAREN 
            {
              Integer RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("FormParList",40, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // FormParList ::= error COMMA 
            {
              Integer RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("FormParList",40, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // FormParList ::= FormPar 
            {
              Integer RESULT =null;
		 RESULT = new Integer(1); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("FormParList",40, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // FormParList ::= FormPar COMMA FormParList 
            {
              Integer RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Integer n = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = n + 1; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("FormParList",40, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // FormPars ::= 
            {
              Integer RESULT =null;
		 RESULT = new Integer(0); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("FormPars",39, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // FormPars ::= FormParList 
            {
              Integer RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Integer n = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = n; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("FormPars",39, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // MethodDeclRest ::= IDENT NT$4 LPAREN FormPars RPAREN VarDeclList LBRACE StatementList RBRACE 
            {
              Object RESULT =null;
              // propagate RESULT from NT$4
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-7)).value;
		int methNameleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)).left;
		int methNameright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)).right;
		String methName = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-8)).value;
		int levelleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int levelright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		Integer level = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		
	parser.inProgramParams++;
	parser.inMain = false;
	currentMeth.setLevel(level); //number of parameters
	
	Tab.chainLocalSymbols(currentMeth);
	Tab.closeScope();

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("MethodDeclRest",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // NT$4 ::= 
            {
              Object RESULT =null;
		int methNameleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int methNameright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String methName = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

 if(parser.inProgramParams>0) { parser.nDefProgramFuncs++; if("main".equals(methName)) parser.inMain = true; }
 else parser.nDefClassMeths++;
 parser.inProgramParams--; 
 
 currentMeth = Tab.insert(Obj.Meth, methName, currentType);
 Tab.openScope();
 isVoid = 0;
 

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$4",48, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // MethodDecl ::= VOID NT$3 MethodDeclRest 
            {
              Object RESULT =null;
              // propagate RESULT from NT$3
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("MethodDecl",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // NT$3 ::= 
            {
              Object RESULT =null;
 isVoid = 1; currentType = Tab.noType; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$3",47, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // MethodDecl ::= Type MethodDeclRest 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("MethodDecl",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // MethodDeclList ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("MethodDeclList",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // MethodDeclList ::= MethodDecl MethodDeclList 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("MethodDeclList",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // ClassMemberDecl ::= MethodDecl 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ClassMemberDecl",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // ClassMemberDecl ::= VarDecl 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ClassMemberDecl",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // ClassMemberDeclList ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ClassMemberDeclList",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // ClassMemberDeclList ::= error ClassMemberDeclList RBRACE 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ClassMemberDeclList",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // ClassMemberDeclList ::= ClassMemberDecl ClassMemberDeclList 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ClassMemberDeclList",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // extendsStm ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("extendsStm",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // extendsStm ::= EXTENDS error LBRACE 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("extendsStm",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // extendsStm ::= EXTENDS IDENT 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 parser.dbg("extends " + i);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("extendsStm",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // ClassDecl ::= CLASS IDENT NT$1 extendsStm LBRACE NT$2 ClassMemberDeclList RBRACE 
            {
              Object RESULT =null;
              // propagate RESULT from NT$2
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		 parser.inProgramParams++; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ClassDecl",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // NT$2 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
 parser.inProgramParams--; Tab.openScope(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$2",46, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // NT$1 ::= 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

	parser.nDeclClasses++; 
	RESULT = Tab.insert(Obj.Type, i, new Struct(Struct.Class));

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$1",45, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // VarDeclName ::= IDENT LBRACKET RBRACKET 
            {
              Object RESULT =null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		
					 if(parser.inProgramParams>0) parser.nDeclGlobArrays++;
					 Tab.insert(Obj.Var, name, currentType);
					 parser.report_info(nameleft+" : Declared variable "+name, null);
				
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("VarDeclName",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // VarDeclName ::= IDENT 
            {
              Object RESULT =null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 
					if(parser.inProgramParams>0) parser.nDeclGlobSimpleVars++;
					Tab.insert(Obj.Var, name, currentType);
					parser.report_info(nameleft+" : Declared variable "+name, null);
				
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("VarDeclName",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // VarDeclNames ::= VarDeclName 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("VarDeclNames",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // VarDeclNames ::= VarDeclNames COMMA VarDeclName 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("VarDeclNames",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // VarDecl ::= Type error LBRACE 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("VarDecl",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // VarDecl ::= Type error SEMI 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("VarDecl",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // VarDecl ::= Type VarDeclNames SEMI 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("VarDecl",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // VarDeclList ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("VarDeclList",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // VarDeclList ::= VarDecl VarDeclList 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("VarDeclList",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // Literal ::= STRING_LITERAL 
            {
              LiteralHolder RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new LiteralHolder(n, Parser.String); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Literal",42, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // Literal ::= CHAR_LITERAL 
            {
              LiteralHolder RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new LiteralHolder(n, Tab.charType); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Literal",42, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // Literal ::= BOOL_LITERAL 
            {
              LiteralHolder RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new LiteralHolder(n, Parser.Bool); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Literal",42, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // Literal ::= NUMBER_LITERAL 
            {
              LiteralHolder RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new LiteralHolder(n, Tab.intType); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Literal",42, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // ConstDeclName ::= IDENT ASSIGNMENT Literal 
            {
              Object RESULT =null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		 
					if(parser.inProgramParams>0) parser.nDeclGlobSimpleConsts++; 
					Tab.insert(Obj.Con, name, currentType);
					parser.report_info(nameleft+" : Declared constant "+name,null);
				
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ConstDeclName",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // ConstDeclNames ::= ConstDeclName 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ConstDeclNames",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // ConstDeclNames ::= ConstDeclNames COMMA ConstDeclName 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ConstDeclNames",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // ConstDecl ::= CONST error SEMI 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ConstDecl",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // ConstDecl ::= CONST Type ConstDeclNames SEMI 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ConstDecl",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // ProgParamDeclPart ::= ClassDecl 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ProgParamDeclPart",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // ProgParamDeclPart ::= VarDecl 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ProgParamDeclPart",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // ProgParamDeclPart ::= ConstDecl 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ProgParamDeclPart",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // ProgParamDeclList ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ProgParamDeclList",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // ProgParamDeclList ::= ProgParamDeclList ProgParamDeclPart 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ProgParamDeclList",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // ProgName ::= IDENT 
            {
              Obj RESULT =null;
		int pnleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int pnright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String pn = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
	parser.report_info("Program: " + pn, null);
	RESULT = Tab.insert(Obj.Prog, pn, Tab.noType);
	Tab.openScope(); 

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ProgName",30, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // $START ::= Program EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = start_val;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Parser$parser.done_parsing();
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // Program ::= PROGRAM ProgName NT$0 ProgParamDeclList LBRACE MethodDeclList RBRACE 
            {
              Object RESULT =null;
              // propagate RESULT from NT$0
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		Obj p = (Obj)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		 
	parser.inProgramParams--;
	Tab.chainLocalSymbols(p);
	Tab.closeScope();

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Program",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // NT$0 ::= 
            {
              Object RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Obj p = (Obj)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
 parser.inProgramParams++; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$0",44, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

